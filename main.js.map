{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    }\r\n];","//Класс, который будет добавлять окну состояние «открыто»\r\nconst popupOpenedClass = 'popup_is-opened';\r\n\r\n\r\n//Ф-я открытия модального окна\r\nexport function openModal(popupElement) {\r\n    popupElement.classList.add(popupOpenedClass);\r\n     //Закрытие по Esc\r\n     document.addEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n   //Ф-я закрытия модального окна\r\n export function closeModal(popupElement) {\r\n    popupElement.classList.remove(popupOpenedClass);\r\n     //Удаление обработчика событий\r\n     document.removeEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n//Обработчик нажатия клавиши Esc\r\n function handleEscClose(event) {\r\n     if (event.key === 'Escape') {\r\n       const openedPopup = document.querySelector(\".popup_is-opened\");\r\n     if (openedPopup) {\r\n       closeModal(openedPopup);\r\n     }\r\n   }\r\n  }\r\n\r\n//Закрытие по оверлей\r\nexport function closeOverlay(event) {\r\n  if (event.target === event.currentTarget) {\r\n    closeModal(event.currentTarget);\r\n  }\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-42',\r\n  headers: {\r\n    authorization: 'f81b68a9-e064-468a-9e6e-9f668a7a60c1',\r\n    'Content-Type': 'application/json',\r\n  }\r\n};\r\n\r\n// Функция для обработки ответа\r\nconst handleResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Получение начальных карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление данных профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Постановка лайка и снятие\r\nexport const toggleLike = (cardId,isLiked) => {\r\n   const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n   const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\",\r\n   }\r\n  return fetch(endpoint, fetchOptions)\r\n    .then(handleResponse);\r\n};\r\n\r\n","import { toggleLike } from \"./api\";\r\n\r\nconst template = document.querySelector(\"#card-template\").content;\r\n\r\nexport function createCard(cardData, callbacks, usersId) {\r\n  const clonedTemplate = template.querySelector('.card').cloneNode(true);\r\n\r\n  // Получаем вложенные элементы\r\n  const titleElement = clonedTemplate.querySelector(\".card__title\");\r\n  const imageElement = clonedTemplate.querySelector(\".card__image\");\r\n  const likeButton = clonedTemplate.querySelector('.card__like-button');\r\n  const deleteButton = clonedTemplate.querySelector('.card__delete-button');\r\n  const likeCounter = clonedTemplate.querySelector(\".card__like-counter\");\r\n\r\nif (!cardData || !cardData.owner) {\r\n  console.error('cardData or owner is undefined:', cardData);\r\n  return;\r\n  }\r\nconst ownerId = cardData.owner._id; // Присваиваем значение ownerId\r\n\r\n// Проверка, является ли текущий пользователь владельцем карточки\r\nif (ownerId !== usersId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n// Добавляем обработчик клика на кнопку удаления\r\n  deleteButton.addEventListener(\"click\", () => {\r\n  callbacks.deleteFunction(clonedTemplate); // Вызываем колбэк с элементом карточки\r\n  });\r\n}\r\n  \r\nconst isLiked = cardData.likes.some(like => like._id === usersId);\r\n\r\n  // Устанавливаем значения\r\n  titleElement.textContent = cardData.name;\r\n  imageElement.alt = cardData.name;\r\n  imageElement.src = cardData.link;\r\n  likeCounter.textContent = cardData.likes.length || \"\";\r\n\r\n  // Добавляем обработчик клика для кнопки лайка\r\n  likeButton.addEventListener('click', () => {\r\n    callbacks.likeFunction(likeButton, cardData._id, isLiked, likeCounter);\r\n  });\r\n\r\n  imageElement.addEventListener('click', () => \r\n    callbacks.onCardClickFunction(cardData));\r\n  return clonedTemplate;\r\n}\r\n\r\nexport function likeCard(likeButton, cardId, isLiked, likeCounter) {\r\n// Вызываем API на сервере\r\n  toggleLike(cardId, isLiked)\r\n    .then((updatedCard) => {\r\n      likeCounter.textContent = updatedCard.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\r\n}","// Функция для отображения ошибки\r\nconst showError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElements.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputElement);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\n// Функция для очистки ошибок\r\nconst hideError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n}\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some(inputElement => !inputElement.validity.valid);\r\n};\r\n\r\nconst validateForm = (formElement, inputElement, validationConfig) => {\r\n  const nameInput = formElement.querySelector('.popup__input_type_name');\r\n  const jobInput = formElement.querySelector('.popup__input_type_description');\r\n\r\n // Регулярные выражения для валидации\r\n  const nameRegex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]{2,40}$/;\r\n  const jobRegex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]{2,200}$/;\r\n\r\n  // Проверка поля \"Имя\"\r\n  if (!nameRegex.test(nameInput.value)) {\r\n    showError(formElement, nameInput, \"Имя должно быть от 2 до 40 символов и содержать только латинские, кириллические буквы, знаки дефиса и пробелы\", validationConfig);\r\n  } else {\r\n    hideError(formElement, nameInput, validationConfig);\r\n  }\r\n\r\n  // Проверка поля \"О себе\"\r\n  if (!jobRegex.test(jobInput.value)) {\r\n    showError(formElement, jobInput, \"О себе должно быть от 2 до 200 символов и содержать только латинские, кириллические буквы, знаки дефиса и пробелы\", validationConfig);\r\n  } else {\r\n    hideError(formElement, jobInput, validationConfig);\r\n  }\r\n\r\n  // Управление активностью кнопки \"Сохранить\"\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n  if (nameRegex.test(nameInput.value) && jobRegex.test(jobInput.value)) {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      validateForm(formElement, inputElement, validationConfig);\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (formElement, validationConfig) => {\r\n  const formList = Array.from(formElement.querySelectorAll(validationConfig.formSelector));\r\n\r\n    formList.forEach((currentFormElement) => {\r\n      setEventListeners(currentFormElement, validationConfig);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  \r\n    inputList.forEach((inputElement) => {\r\n      hideError(formElement, inputElement, validationConfig);\r\n        inputElement.setCustomValidity(\"\"); \r\n  });\r\n\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n    if (buttonElement) {\r\n      buttonElement.disabled = true;\r\n      buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    }\r\n};","import './index.css'; // добавьте импорт главного файла стилей\r\nimport { initialCards } from './scripts/cards.js'; // импорт картинок\r\nimport { openModal, closeModal, closeOverlay } from './components/modal.js'; // импорт модалок\r\nimport { likeCard, createCard } from './components/card.js';\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addCard, removeCard } from './components/api.js'\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\n\r\n// Контейнер с карточками\r\nconst placesList = document.querySelector('.places__list');\r\n// Редактирование профиля\r\nconst formEditProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\r\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n// Назначение\r\nconst formNewPlace = document.forms[\"new-place\"];\r\nconst cardNameInput = formNewPlace.querySelector('.popup__input_type_card-name');\r\nconst urlInput = formNewPlace.querySelector('.popup__input_type_url');\r\nconst imagePopup =   document.querySelector('.popup_type_image');\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nconst addButton =  document.querySelector('.profile__add-button'); // Кнопка доб-ия карточек\r\nconst addPopup =   document.querySelector('.popup_type_new-card'); // Доб-ие карточки\r\n\r\nconst editButton =  document.querySelector('.profile__edit-button'); // Ред-ие профиля\r\nconst popUps = document.querySelectorAll(\".popup\"); // Попапы\r\nconst editPopup =   document.querySelector('.popup_type_edit'); // Ред-ие\r\nconst confirmPopup = document.querySelector(\".popup_type_confirm\");\r\nconst confirmButton = confirmPopup.querySelector(\".popup_button\");\r\nconst closeButtons = document.querySelectorAll('.popup__close');\r\n\r\nfunction openCardPopup({link, name}) {\r\n  popupCaption.textContent = name;\r\n  popupImage.alt = name;\r\n  popupImage.src = link;\r\n  openModal(imagePopup);\r\n}\r\n\r\nconst cardCallbacks = {\r\n  deleteFunction: deleteCard,\r\n  likeFunction: likeCard,\r\n  onCardClickFunction: openCardPopup,\r\n}\r\n\r\n// Обработчик для добавления нового места\r\nfunction handleNewPlaceFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = cardNameInput.value;\r\n  const link = urlInput.value;\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем данные\r\n  addCard(name, link)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(cardData, cardCallbacks, userId); // Передаем userId \r\n      placesList.prepend(cardElement); // Используем placesList для подстановки карточки\r\n\r\n      formNewPlace.reset(); // Использование formNewPlace для сброса формы\r\n      closeModal(addPopup); // Закрытие попапа добавления карточек\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = \"Сохранить\";\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n// Обработчик для редактирования профиля\r\nfunction handleEditFormSubmit(evt) {\r\n    evt.preventDefault();\r\n    const name = nameInput.value; // Используем переменную nameInput\r\n    const about = jobInput.value; // Используем переменную jobInput\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  updateUserInfo(name, about)\r\n    .then((userData) => {\r\n      profileName.textContent = userData.name; // Используем profileName\r\n      profileJob.textContent = userData.about; // Используем profileJob\r\n      closeModal(editPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false; // Разблокируем кнопку отправки\r\n    });\r\n}\r\n\r\n// Слушатели событий\r\neditButton.addEventListener(\"click\", () => {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  clearValidation(formEditProfile, validationConfig)\r\n  openModal(editPopup);\r\n})\r\n\r\naddButton.addEventListener(\"click\", () => {\r\n  formNewPlace.reset();\r\n  clearValidation(formNewPlace, validationConfig)\r\n  openModal(addPopup);\r\n})\r\n\r\n// Предотвращение отправки формы при нажатии Esc в попапах\r\npopUps.forEach((popup) => {\r\n  const closeCross = popup.querySelector(\".popup_close\");\r\n    if (closeCross) {\r\n    closeCross.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n    });\r\n  }\r\n  popup.addEventListener(\"click\", closeOverlay);\r\n  // Добавляем модификатор popup_is-animated модальному окну\r\n  popup.classList.add(\"popup_is-animated\");\r\n})\r\n\r\n// Подключение формы к обработчикам\r\nformNewPlace.addEventListener(\"submit\", handleNewPlaceFormSubmit);\r\nformEditProfile.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n// Показать все карточки\r\ninitialCards.forEach((cardData) => {\r\n  const card = createCard(cardData, cardCallbacks); // Передаём removeCard в качестве колбека\r\n  placesList.appendChild(card);\r\n})\r\n\r\ncloseButtons.forEach(button => {\r\n  button.addEventListener('click', function() {\r\n    const popup = this.closest('.popup');\r\n    closeModal(popup);\r\n  });\r\n});\r\n\r\n// Включение валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n}\r\n\r\nconst forms = document.querySelectorAll('.popup__form'); enableValidation(forms, validationConfig);\r\n\r\n// Функции отрисовки карточек\r\nfunction renderCards(cardsData) {\r\n  cardsData.forEach((cardData) => {\r\n    const card = createCard(cardData, cardCallbacks);\r\n    placesList.appendChild(card);\r\n  })\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    if (userData.avatar) {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n    }\r\n    renderCards(cards);\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Ошибка обновления:\", err);\r\n  });\r\n\r\n// Ф-ия для удаления карточки\r\nfunction deleteCard (cardElement, cardId) {\r\n  cardIdForDeletion = cardId;\r\n  selectedCardElement = cardElement;\r\n  openModal(confirmPopup);\r\n}\r\n\r\nconst handleConfirm = (evt) => {\r\n  evt.preventDefault();\r\n\r\n  // Блокируем кнопку подтверждения\r\n  const confirmButton = deleteConfirmationPopup.querySelector(\".popup__button\"); // Найдите кнопку внутри попапа\r\n  confirmButton.textContent = \"Удаление...\";\r\n  confirmButton.disabled = true;\r\n\r\n  // Отправляем запрос на сервер для удаления карточки\r\n  removeCard(cardIdForDeletion)\r\n    .then(() => {\r\n  // Удаляем карточку из DOM\r\n    selectedCardElement.remove();\r\n    closeModal(confirmPopup); // Закрываем попап подтверждения\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Ошибка при удалении карточки: ${error}`);\r\n    })\r\n    .finally(() => {\r\n      // Восстанавливаем текст и состояние кнопки\r\n      confirmButton.textContent = \"Да\";\r\n      confirmButton.disabled = false;\r\n    });\r\n};\r\n\r\nconfirmPopup.addEventListener(\"submit\", handleConfirm);"],"names":["popupOpenedClass","openModal","popupElement","classList","add","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","event","key","openedPopup","querySelector","closeOverlay","target","currentTarget","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","template","content","createCard","cardData","callbacks","usersId","clonedTemplate","cloneNode","titleElement","imageElement","likeButton","deleteButton","likeCounter","owner","_id","style","display","deleteFunction","isLiked","likes","some","like","textContent","name","alt","src","link","length","likeFunction","onCardClickFunction","console","error","showError","formElement","inputElement","errorMessage","validationConfig","errorElement","inputElements","id","errorClass","hideError","inputErrorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","forEach","setCustomValidity","submitButtonSelector","placesList","formEditProfile","forms","nameInput","jobInput","profileTitle","profileDescription","formNewPlace","cardNameInput","urlInput","imagePopup","popupImage","popupCaption","addButton","addPopup","editButton","popUps","editPopup","confirmPopup","closeButtons","cardCallbacks","cardElement","cardId","cardIdForDeletion","selectedCardElement","endpoint","fetch","method","then","toggleLike","updatedCard","toggle","catch","log","_ref","value","reset","popup","closeCross","evt","preventDefault","submitButton","body","JSON","stringify","addCard","userId","prepend","err","finally","about","originalText","updateUserInfo","userData","profileName","profileJob","card","appendChild","button","this","closest","formSelector","currentFormElement","nameRegex","jobRegex","test","validateForm","setEventListeners","enableValidation","all","_ref2","_ref3","cards","avatar","profileImage","backgroundImage","confirmButton","deleteConfirmationPopup"],"sourceRoot":""}