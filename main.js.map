{"version":3,"file":"main.js","mappings":"mBAAO,ICCDA,EAAmB,kBAIlB,SAASC,EAAUC,GACtBA,EAAaC,UAAUC,IAAIJ,GAE1BK,SAASC,iBAAiB,UAAWC,EACvC,CAGK,SAASC,EAAWN,GACxBA,EAAaC,UAAUM,OAAOT,GAE7BK,SAASK,oBAAoB,UAAWH,EAC1C,CAGF,SAASA,EAAeI,GACpB,GAAkB,WAAdA,EAAMC,IAAkB,CAC1B,IAAMC,EAAcR,SAASS,cAAc,oBACzCD,GACFL,EAAWK,EAEf,CACD,CAGK,SAASE,EAAaJ,GACvBA,EAAMK,SAAWL,EAAMM,eACzBT,EAAWG,EAAMM,cAErB,CCjCA,IAAMC,EAAS,CACbC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAKdC,EAAiB,SAACC,GACtB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACvC,ECZMC,EAAWzB,SAASS,cAAc,kBAAkBiB,QAEnD,SAASC,EAAWC,EAAUC,EAAWC,GAC9C,IAAMC,EAAiBN,EAAShB,cAAc,SAASuB,WAAU,GAG3DC,EAAeF,EAAetB,cAAc,gBAC5CyB,EAAeH,EAAetB,cAAc,gBAC5C0B,EAAaJ,EAAetB,cAAc,sBAC1C2B,EAAeL,EAAetB,cAAc,wBAC5C4B,EAAcN,EAAetB,cAAc,uBAEnD,GAAKmB,GAAaA,EAASU,MAA3B,CAIgBV,EAASU,MAAMC,MAGfT,EACdM,EAAaI,MAAMC,QAAU,OAG7BL,EAAanC,iBAAiB,QAAS,WACvC4B,EAAUa,eAAeX,EACzB,GAGF,IAAMY,EAAUf,EAASgB,MAAMC,KAAK,SAAAC,GAAI,OAAIA,EAAKP,MAAQT,CAAO,GAe9D,OAZAG,EAAac,YAAcnB,EAASoB,KACpCd,EAAae,IAAMrB,EAASoB,KAC5Bd,EAAagB,IAAMtB,EAASuB,KAC5Bd,EAAYU,YAAcnB,EAASgB,MAAMQ,QAAU,GAGnDjB,EAAWlC,iBAAiB,QAAS,WACnC4B,EAAUwB,aAAalB,EAAYP,EAASW,IAAKI,EAASN,EAC5D,GAEAH,EAAajC,iBAAiB,QAAS,kBACrC4B,EAAUyB,oBAAoB1B,EAAS,GAClCG,CA5BP,CAFAwB,QAAQC,MAAM,kCAAmC5B,EA+BnD,CC7CA,IAAM6B,EAAY,SAACC,EAAaC,EAAcC,EAAcC,GAC1D,IAAMC,EAAeJ,EAAYjD,cAAc,IAADc,OAAKoC,EAAaI,GAAE,WAClEJ,EAAa7D,UAAUC,IAAI8D,EAAiBG,iBAC5CF,EAAaf,YAAca,EAC3BE,EAAahE,UAAUC,IAAI8D,EAAiBI,WAC9C,EAGMC,EAAY,SAACR,EAAaC,EAAcE,GAC5C,IAAMC,EAAeJ,EAAYjD,cAAc,IAADc,OAAKoC,EAAaI,GAAE,WAClEJ,EAAa7D,UAAUM,OAAOyD,EAAiBG,iBAC/CF,EAAahE,UAAUM,OAAOyD,EAAiBI,YAC/CH,EAAaf,YAAc,EAC7B,EA6BMoB,EAAoB,SAACT,EAAaG,EAAkBO,GACxD,IAAMC,EAAYC,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBACrEC,EAAYC,gBAAgBN,GAElCD,EAAcQ,SAAWF,EACrBA,EACFN,EAActE,UAAUC,IAAI8D,EAAiBgB,qBAE3CT,EAActE,UAAUM,OAAOyD,EAAiBgB,oBAEtD,EAsBaC,EAAkB,SAACpB,EAAaG,GACzBS,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBAE/DM,QAAQ,SAACpB,GACjBO,EAAUR,EAAaC,EAAcE,GACnCF,EAAaqB,kBAAkB,GACrC,GAEE,IAAMZ,EAAgBV,EAAYjD,cAAcoD,EAAiBoB,sBAC7Db,IACFA,EAAcQ,UAAW,EACzBR,EAActE,UAAUC,IAAI8D,EAAiBgB,qBAEnD,E,sGChFA,IAyBIK,EAzBEC,EAAanF,SAASS,cAAc,iBAEpC2E,EAAkBpF,SAASqF,MAAM,gBACjCC,EAAYF,EAAgB3E,cAAc,2BAC1C8E,EAAWH,EAAgB3E,cAAc,kCACzC+E,EAAexF,SAASS,cAAc,mBACtCgF,EAAqBzF,SAASS,cAAc,yBAE5CiF,EAAe1F,SAASqF,MAAM,aAC9BM,EAAgBD,EAAajF,cAAc,gCAC3CmF,EAAWF,EAAajF,cAAc,0BACtCoF,EAAe7F,SAASS,cAAc,qBACtCqF,EAAaD,EAAWpF,cAAc,iBACtCsF,EAAeF,EAAWpF,cAAc,mBAExCuF,EAAahG,SAASS,cAAc,wBACpCwF,EAAajG,SAASS,cAAc,wBAEpCyF,EAAclG,SAASS,cAAc,yBACrC0F,EAASnG,SAASwE,iBAAiB,UACnC4B,EAAcpG,SAASS,cAAc,oBACrC4F,EAAerG,SAASS,cAAc,uBAEtC6F,GADgBD,EAAa5F,cAAc,iBAC5BT,SAASwE,iBAAiB,kBAG3C+B,EAAoB,KACpBC,EAAsB,KASpBC,EAAgB,CACpB/D,eAyIF,SAAqBgE,EAAaC,GAChCJ,EAAoBI,EACpBH,EAAsBE,EACtB9G,EAAUyG,EACZ,EA5IEhD,aFEK,SAAkBlB,EAAYwE,EAAQhE,EAASN,IDc5B,SAACsE,EAAOhE,GAC/B,IAAMiE,EAAW,GAAHrF,OAAMV,EAAOC,QAAO,iBAAAS,OAAgBoF,GAKnD,OAAOE,MAAMD,EAJS,CACpB7F,QAASF,EAAOE,QAChB+F,OAAQnE,EAAU,SAAW,QAG5BoE,KAAK9F,EACV,ECpBE+F,CAAWL,EAAQhE,GAChBoE,KAAK,SAACE,GACL5E,EAAYU,YAAckE,EAAYrE,MAAMQ,OAC5CjB,EAAWrC,UAAUoH,OAAO,8BAC9B,GACCC,MAAM,SAAC3D,GAAK,OAAKD,QAAQ6D,IAAI,8BAAD7F,OAA+BiC,GAAQ,EACxE,EETEF,oBAVF,SAAsB+D,GAAe,IAAblE,EAAIkE,EAAJlE,KAAMH,EAAIqE,EAAJrE,KAC5B+C,EAAahD,YAAcC,EAC3B8C,EAAW7C,IAAMD,EACjB8C,EAAW5C,IAAMC,EACjBvD,EAAUiG,EACZ,GAwDA,SAASyB,EAAgBC,EAAQC,GAA+B,IAApBC,EAAIC,UAAAtE,OAAA,QAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAG,YACjDH,EAAOxE,YAAcyE,EAAYC,EAAO,YACxCF,EAAO3C,SAAW4C,CACpB,CAGAtB,EAAWjG,iBAAiB,QAAS,WACnCqF,EAAUsC,MAAQpC,EAAazC,YAC/BwC,EAASqC,MAAQnC,EAAmB1C,YACpC+B,EAAgBM,EAAiBvB,GACjCjE,EAAUwG,EACZ,GAEAJ,EAAU/F,iBAAiB,QAAS,WAClCyF,EAAamC,QACb/C,EAAgBY,EAAc7B,GAC9BjE,EAAUqG,EACZ,GAGAE,EAAOpB,QAAQ,SAAC+C,GACd,IAAMC,EAAaD,EAAMrH,cAAc,gBACjCsH,GACJA,EAAW9H,iBAAiB,QAAS,WACrCE,EAAW2H,EACX,GAEFA,EAAM7H,iBAAiB,QAASS,GAEhCoH,EAAMhI,UAAUC,IAAI,oBACtB,GAGA2F,EAAazF,iBAAiB,SAhF9B,SAAkC+H,GAChCA,EAAIC,iBACJ,IAAMjF,EAAO2C,EAAciC,MACrBzE,EAAOyC,EAASgC,MAChBM,EAAeF,EAAIrH,OAAOF,cAAc,kBAE5C6G,EAAgBY,GAAc,EAAM,iBHdjB,SAAClF,EAAMG,GAC5B,OAAO0D,MAAM,GAADtF,OAAIV,EAAOC,QAAO,UAAU,CACtCgG,OAAQ,OACR/F,QAASF,EAAOE,QAChBoH,KAAMC,KAAKC,UAAU,CAACrF,KAAAA,EAAKG,KAAAA,MAE1B4D,KAAK9F,EACV,CGUEqH,CAAQtF,EAAMG,GACX4D,KAAK,SAACnF,GACL,IAAM8E,EAAc/E,EAAWC,EAAU6E,EAAevB,GACxDC,EAAWoD,QAAQ7B,GACnBhB,EAAamC,QACb1H,EAAW8F,EACb,GACCkB,MAAM,SAACqB,GACNjF,QAAQC,MAAM,kCAAmCgF,EACnD,GACCC,QAAQ,WACPnB,EAAgBY,GAAc,EAChC,EACJ,GA2DA9C,EAAgBnF,iBAAiB,SAxDjC,SAA8B+H,GAC5BA,EAAIC,iBACJ,IAAMjF,EAAOsC,EAAUsC,MACjBc,EAAQnD,EAASqC,MACjBM,EAAeF,EAAIrH,OAAOF,cAAc,kBACxCkI,EAAeT,EAAanF,YAClCuE,EAAgBY,GAAc,EAAM,iBHjDR,SAAClF,EAAM0F,GACnC,OAAO7B,MAAM,GAADtF,OAAIV,EAAOC,QAAO,aAAa,CACzCgG,OAAQ,QACR/F,QAASF,EAAOE,QAChBoH,KAAMC,KAAKC,UAAU,CAACrF,KAAAA,EAAK0F,MAAAA,MAE1B3B,KAAK9F,EACV,CG4CE2H,CAAe5F,EAAM0F,GAClB3B,KAAK,SAAC8B,GACLrD,EAAazC,YAAc8F,EAAS7F,KACpCyC,EAAmB1C,YAAc8F,EAASH,MAC1CvI,EAAWiG,EACb,GACCe,MAAM,SAACqB,GACNjF,QAAQC,MAAM,iCAAkCgF,EAClD,GACCC,QAAQ,WACPnB,EAAgBY,GAAc,EAAOS,EACvC,EACJ,GLhG4B,CACxB,CACE3F,KAAM,QACNG,KAAM,gFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,sBACNG,KAAM,4FACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,UACNG,KAAM,iFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,WACNG,KAAM,mFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,qBACNG,KAAM,4FACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,SACNG,KAAM,gFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,KKwFAmC,QAAQ,SAACnD,GACpB,IAAMkH,EAAOnH,EAAWC,EAAU6E,GAClCtB,EAAW4D,YAAYD,EACzB,GAEAxC,EAAavB,QAAQ,SAAAwC,GACnBA,EAAOtH,iBAAiB,QAAS,WAE/BE,EADc6I,KAAKC,QAAQ,UAE7B,EACF,GAGA,IAAMpF,EAAmB,CACvBqF,aAAc,eACdzE,cAAe,gBACfQ,qBAAsB,iBACtBJ,oBAAqB,yBACrBb,gBAAiB,0BACjBC,WAAY,yBDvFkB,SAACP,EAAaG,GAC3BS,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBqF,eAEjEnE,QAAQ,SAACoE,IAfM,SAACzF,EAAaG,GACtC,IAAMQ,EAAYC,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBACrEL,EAAgBV,EAAYjD,cAAcoD,EAAiBoB,sBAEjEZ,EAAUU,QAAQ,SAACpB,GACjBA,EAAa1D,iBAAiB,QAAS,YA5CtB,SAACyD,EAAaG,GACjC,IAAMyB,EAAY5B,EAAYjD,cAAc,2BACtC8E,EAAW7B,EAAYjD,cAAc,kCAGzB,iCAIH2I,KAAK9D,EAAUsC,OAG5B1D,EAAUR,EAAa4B,EAAWzB,GAFlCJ,EAAUC,EAAa4B,EAAW,gHAAiHzB,GAJpI,kCAUHuF,KAAK7D,EAASqC,OAG1B1D,EAAUR,EAAa6B,EAAU1B,GAFjCJ,EAAUC,EAAa6B,EAAU,oHAAqH1B,GAMxJ,IAAMO,EAAgBV,EAAYjD,cAAcoD,EAAiBoB,sBACjEd,EAAkBT,EAAaG,EAAkBO,EACnD,CAoBMiF,CAAa3F,EAAaC,EAC5B,EACF,GACAQ,EAAkBT,EAAaG,EAAkBO,EACnD,CAMIkF,CAAkBH,EAAoBtF,EACxC,EACF,CCoFA0F,CAAiB1F,GAUjBxC,QAAQmI,IAAI,CHrJH3C,MAAM,GAADtF,OAAIV,EAAOC,QAAO,aAAa,CACzCC,QAASF,EAAOE,UAEfgG,KAAK9F,GAKD4F,MAAM,GAADtF,OAAIV,EAAOC,QAAO,UAAU,CACtCC,QAASF,EAAOE,UAEfgG,KAAK9F,KG2IP8F,KAAK,SAAA0C,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBZ,EAAQa,EAAA,GAAEC,EAAKD,EAAA,GACrBxE,EAAS2D,EAAStG,IAClBiD,EAAazC,YAAc8F,EAAS7F,KACpCyC,EAAmB1C,YAAc8F,EAASH,MACtCG,EAASe,SACXC,aAAarH,MAAMsH,gBAAkB,QAAHvI,OAAWsH,EAASe,OAAM,OAElDD,EAdJ5E,QAAQ,SAACnD,GACjB,IAAMkH,EAAOnH,EAAWC,EAAU6E,GAClCtB,EAAW4D,YAAYD,EACzB,EAYA,GACC3B,MAAM,SAACqB,GACNjF,QAAQC,MAAM,qBAAsBgF,EACtC,GA8BFnC,EAAapG,iBAAiB,SArBR,SAAC+H,GACrBA,EAAIC,iBAEJ,IH1IyBtB,EG0InBoD,EAAgB1D,EAAa5F,cAAc,kBACjD6G,EAAgByC,GAAe,EAAM,gBH3IZpD,EG6IdJ,EH5IJM,MAAM,GAADtF,OAAIV,EAAOC,QAAO,WAAAS,OAAUoF,GAAU,CAChDG,OAAQ,SACR/F,QAASF,EAAOE,UAEfgG,KAAK9F,IGyIL8F,KAAK,WAENP,EAAoBpG,SACpBD,EAAWkG,EACX,GACCc,MAAM,SAAC3D,GACND,QAAQC,MAAM,iCAADjC,OAAkCiC,GACjD,GACCiF,QAAQ,WAENnB,EAAgByC,GAAe,EAAO,KACzC,EACJ,E","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    }\r\n];","//Класс, который будет добавлять окну состояние «открыто»\r\nconst popupOpenedClass = 'popup_is-opened';\r\n\r\n\r\n//Ф-я открытия модального окна\r\nexport function openModal(popupElement) {\r\n    popupElement.classList.add(popupOpenedClass);\r\n     //Закрытие по Esc\r\n     document.addEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n   //Ф-я закрытия модального окна\r\n export function closeModal(popupElement) {\r\n    popupElement.classList.remove(popupOpenedClass);\r\n     //Удаление обработчика событий\r\n     document.removeEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n//Обработчик нажатия клавиши Esc\r\n function handleEscClose(event) {\r\n     if (event.key === 'Escape') {\r\n       const openedPopup = document.querySelector(\".popup_is-opened\");\r\n     if (openedPopup) {\r\n       closeModal(openedPopup);\r\n     }\r\n   }\r\n  }\r\n\r\n//Закрытие по оверлей\r\nexport function closeOverlay(event) {\r\n  if (event.target === event.currentTarget) {\r\n    closeModal(event.currentTarget);\r\n  }\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-42',\r\n  headers: {\r\n    authorization: 'f81b68a9-e064-468a-9e6e-9f668a7a60c1',\r\n    'Content-Type': 'application/json',\r\n  }\r\n};\r\n\r\n// Функция для обработки ответа\r\nconst handleResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Получение начальных карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление данных профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({name,about})\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({name,link})\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Постановка лайка и снятие\r\nexport const toggleLike = (cardId,isLiked) => {\r\n   const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n   const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\",\r\n   }\r\n  return fetch(endpoint, fetchOptions)\r\n    .then(handleResponse);\r\n};\r\n\r\n","import { toggleLike } from \"./api\";\r\n\r\nconst template = document.querySelector(\"#card-template\").content;\r\n\r\nexport function createCard(cardData, callbacks, usersId) {\r\n  const clonedTemplate = template.querySelector('.card').cloneNode(true);\r\n\r\n  // Получаем вложенные элементы\r\n  const titleElement = clonedTemplate.querySelector(\".card__title\");\r\n  const imageElement = clonedTemplate.querySelector(\".card__image\");\r\n  const likeButton = clonedTemplate.querySelector('.card__like-button');\r\n  const deleteButton = clonedTemplate.querySelector('.card__delete-button');\r\n  const likeCounter = clonedTemplate.querySelector(\".card__like-counter\");\r\n\r\nif (!cardData || !cardData.owner) {\r\n  console.error('cardData or owner is undefined:', cardData);\r\n  return;\r\n  }\r\nconst ownerId = cardData.owner._id; // Присваиваем значение ownerId\r\n\r\n// Проверка, является ли текущий пользователь владельцем карточки\r\nif (ownerId !== usersId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n// Добавляем обработчик клика на кнопку удаления\r\n  deleteButton.addEventListener(\"click\", () => {\r\n  callbacks.deleteFunction(clonedTemplate); // Вызываем колбэк с элементом карточки\r\n  });\r\n}\r\n  \r\nconst isLiked = cardData.likes.some(like => like._id === usersId);\r\n\r\n  // Устанавливаем значения\r\n  titleElement.textContent = cardData.name;\r\n  imageElement.alt = cardData.name;\r\n  imageElement.src = cardData.link;\r\n  likeCounter.textContent = cardData.likes.length || \"\";\r\n\r\n  // Добавляем обработчик клика для кнопки лайка\r\n  likeButton.addEventListener('click', () => {\r\n    callbacks.likeFunction(likeButton, cardData._id, isLiked, likeCounter);\r\n  });\r\n\r\n  imageElement.addEventListener('click', () => \r\n    callbacks.onCardClickFunction(cardData));\r\n  return clonedTemplate;\r\n}\r\n\r\nexport function likeCard(likeButton, cardId, isLiked, likeCounter) {\r\n// Вызываем API на сервере\r\n  toggleLike(cardId, isLiked)\r\n    .then((updatedCard) => {\r\n      likeCounter.textContent = updatedCard.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\r\n}","// Функция для отображения ошибки\r\nconst showError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\n// Функция для очистки ошибок\r\nconst hideError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n}\r\n\r\nconst validateForm = (formElement, validationConfig) => {\r\n  const nameInput = formElement.querySelector('.popup__input_type_name');\r\n  const jobInput = formElement.querySelector('.popup__input_type_description');\r\n\r\n // Регулярные выражения для валидации\r\n  const nameRegex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]{2,40}$/;\r\n  const jobRegex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]{2,200}$/;\r\n\r\n  // Проверка поля \"Имя\"\r\n  if (!nameRegex.test(nameInput.value)) {\r\n    showError(formElement, nameInput, \"Имя должно быть от 2 до 40 символов и содержать только латинские, кириллические буквы, знаки дефиса и пробелы\", validationConfig);\r\n  } else {\r\n    hideError(formElement, nameInput, validationConfig);\r\n  }\r\n\r\n  // Проверка поля \"О себе\"\r\n  if (!jobRegex.test(jobInput.value)) {\r\n    showError(formElement, jobInput, \"О себе должно быть от 2 до 200 символов и содержать только латинские, кириллические буквы, знаки дефиса и пробелы\", validationConfig);\r\n  } else {\r\n    hideError(formElement, jobInput, validationConfig);\r\n  }\r\n\r\n  // Управление активностью кнопки \"Сохранить\"\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n  toggleButtonState(formElement, validationConfig, buttonElement);\r\n};\r\n\r\nconst toggleButtonState = (formElement, validationConfig, buttonElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const isInvalid = hasInvalidInput(inputList);\r\n\r\n  buttonElement.disabled = isInvalid;\r\n  if (isInvalid) {\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n      buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      validateForm(formElement, inputElement, validationConfig);\r\n    });\r\n  });\r\n  toggleButtonState(formElement, validationConfig, buttonElement);\r\n};\r\n\r\nexport const enableValidation = (formElement, validationConfig) => {\r\n  const formList = Array.from(formElement.querySelectorAll(validationConfig.formSelector));\r\n// Проходим по каждой форме и устанавливаем обработчики событий\r\n  formList.forEach((currentFormElement) => {\r\n    setEventListeners(currentFormElement, validationConfig);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  \r\n    inputList.forEach((inputElement) => {\r\n      hideError(formElement, inputElement, validationConfig);\r\n        inputElement.setCustomValidity(\"\"); \r\n  });\r\n\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n    if (buttonElement) {\r\n      buttonElement.disabled = true;\r\n      buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    }\r\n};","import './index.css'; // добавьте импорт главного файла стилей\r\nimport { initialCards } from './scripts/cards.js'; // импорт картинок\r\nimport { openModal, closeModal, closeOverlay } from './components/modal.js'; // импорт модалок\r\nimport { likeCard, createCard } from './components/card.js';\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addCard, removeCard } from './components/api.js'\r\nimport { enableValidation, clearValidation } from './components/validation.js';\r\n\r\n// Контейнер с карточками\r\nconst placesList = document.querySelector('.places__list');\r\n// Редактирование профиля\r\nconst formEditProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\r\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n// Назначение\r\nconst formNewPlace = document.forms[\"new-place\"];\r\nconst cardNameInput = formNewPlace.querySelector('.popup__input_type_card-name');\r\nconst urlInput = formNewPlace.querySelector('.popup__input_type_url');\r\nconst imagePopup =   document.querySelector('.popup_type_image');\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nconst addButton =  document.querySelector('.profile__add-button'); // Кнопка доб-ия карточек\r\nconst addPopup =   document.querySelector('.popup_type_new-card'); // Доб-ие карточки\r\n\r\nconst editButton =  document.querySelector('.profile__edit-button'); // Ред-ие профиля\r\nconst popUps = document.querySelectorAll(\".popup\"); // Попапы\r\nconst editPopup =   document.querySelector('.popup_type_edit'); // Ред-ие\r\nconst confirmPopup = document.querySelector(\".popup_type_confirm\");\r\nconst confirmButton = confirmPopup.querySelector(\".popup_button\");\r\nconst closeButtons = document.querySelectorAll('.popup__close');\r\n\r\nlet userId;\r\nlet cardIdForDeletion = null;\r\nlet selectedCardElement = null;\r\n\r\nfunction openCardPopup({link, name}) {\r\n  popupCaption.textContent = name;\r\n  popupImage.alt = name;\r\n  popupImage.src = link;\r\n  openModal(imagePopup);\r\n}\r\n\r\nconst cardCallbacks = {\r\n  deleteFunction: deleteCard,\r\n  likeFunction: likeCard,\r\n  onCardClickFunction: openCardPopup,\r\n}\r\n\r\n// Обработчик для добавления нового места\r\nfunction handleNewPlaceFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = cardNameInput.value;\r\n  const link = urlInput.value;\r\n  const submitButton = evt.target.querySelector(\".popup__button\"); // Блокируем кнопку\r\n\r\n    setLoadingState(submitButton, true, \"Сохранение...\");\r\n\r\n  // Отправляем данные\r\n  addCard(name, link)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(cardData, cardCallbacks, userId); // Передаем userId \r\n      placesList.prepend(cardElement); // Используем placesList для подстановки карточки\r\n      formNewPlace.reset(); // Использование formNewPlace для сброса формы\r\n      closeModal(addPopup); // Закрытие попапа добавления карточек\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      setLoadingState(submitButton, false);\r\n    });\r\n}\r\n\r\n// Обработчик для редактирования профиля\r\nfunction handleEditFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = nameInput.value; // Используем переменную nameInput\r\n  const about = jobInput.value; // Используем переменную jobInput\r\n  const submitButton = evt.target.querySelector(\".popup__button\"); // Блокируем кнопку\r\n  const originalText = submitButton.textContent;\r\n  setLoadingState(submitButton, true, \"Сохранение...\");\r\n\r\n  updateUserInfo(name, about)\r\n    .then((userData) => {\r\n      profileTitle.textContent = userData.name;\r\n      profileDescription.textContent = userData.about;\r\n      closeModal(editPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      setLoadingState(submitButton, false, originalText);\r\n    });\r\n}\r\n\r\nfunction setLoadingState(button, isLoading, text = \"Сохранить\") {\r\n  button.textContent = isLoading ? text : \"Сохранить\";\r\n  button.disabled = isLoading;\r\n}\r\n\r\n// Слушатели событий\r\neditButton.addEventListener(\"click\", () => {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  clearValidation(formEditProfile, validationConfig)\r\n  openModal(editPopup);\r\n})\r\n\r\naddButton.addEventListener(\"click\", () => {\r\n  formNewPlace.reset();\r\n  clearValidation(formNewPlace, validationConfig)\r\n  openModal(addPopup);\r\n})\r\n\r\n// Предотвращение отправки формы при нажатии Esc в попапах\r\npopUps.forEach((popup) => {\r\n  const closeCross = popup.querySelector(\".popup_close\");\r\n    if (closeCross) {\r\n    closeCross.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n    });\r\n  }\r\n  popup.addEventListener(\"click\", closeOverlay);\r\n  // Добавляем модификатор popup_is-animated модальному окну\r\n  popup.classList.add(\"popup_is-animated\");\r\n})\r\n\r\n// Подключение формы к обработчикам\r\nformNewPlace.addEventListener(\"submit\", handleNewPlaceFormSubmit);\r\nformEditProfile.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n// Показать все карточки\r\ninitialCards.forEach((cardData) => {\r\n  const card = createCard(cardData, cardCallbacks); // Передаём removeCard в качестве колбека\r\n  placesList.appendChild(card);\r\n})\r\n\r\ncloseButtons.forEach(button => {\r\n  button.addEventListener('click', function() {\r\n    const popup = this.closest('.popup');\r\n    closeModal(popup);\r\n  });\r\n});\r\n\r\n// Включение валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n}\r\n\r\nenableValidation(validationConfig);\r\n\r\n// Функции отрисовки карточек\r\nfunction renderCards(cardsData) {\r\n  cardsData.forEach((cardData) => {\r\n    const card = createCard(cardData, cardCallbacks);\r\n    placesList.appendChild(card);\r\n  })\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n    profileTitle.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    if (userData.avatar) {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n    }\r\n    renderCards(cards);\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Ошибка обновления:\", err);\r\n  });\r\n\r\n// Ф-ия для удаления карточки\r\nfunction deleteCard (cardElement, cardId) {\r\n  cardIdForDeletion = cardId;\r\n  selectedCardElement = cardElement;\r\n  openModal(confirmPopup);\r\n}\r\n\r\nconst handleConfirm = (evt) => {\r\n  evt.preventDefault();\r\n  // Блокируем кнопку подтверждения\r\n  const confirmButton = confirmPopup.querySelector(\".popup__button\"); // Найдите кнопку внутри попапа\r\n  setLoadingState(confirmButton, true, \"Удаление...\");\r\n  // Отправляем запрос на сервер для удаления карточки\r\n  removeCard(cardIdForDeletion)\r\n    .then(() => {\r\n  // Удаляем карточку из DOM\r\n    selectedCardElement.remove();\r\n    closeModal(confirmPopup); // Закрываем попап подтверждения\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Ошибка при удалении карточки: ${error}`);\r\n    })\r\n    .finally(() => {\r\n      // Восстанавливаем текст и состояние кнопки\r\n       setLoadingState(confirmButton, false, \"Да\");\r\n    });\r\n};\r\n\r\nconfirmPopup.addEventListener(\"submit\", handleConfirm);"],"names":["popupOpenedClass","openModal","popupElement","classList","add","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","event","key","openedPopup","querySelector","closeOverlay","target","currentTarget","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","template","content","createCard","cardData","callbacks","usersId","clonedTemplate","cloneNode","titleElement","imageElement","likeButton","deleteButton","likeCounter","owner","_id","style","display","deleteFunction","isLiked","likes","some","like","textContent","name","alt","src","link","length","likeFunction","onCardClickFunction","console","error","showError","formElement","inputElement","errorMessage","validationConfig","errorElement","id","inputErrorClass","errorClass","hideError","toggleButtonState","buttonElement","inputList","Array","from","querySelectorAll","inputSelector","isInvalid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","forEach","setCustomValidity","submitButtonSelector","userId","placesList","formEditProfile","forms","nameInput","jobInput","profileTitle","profileDescription","formNewPlace","cardNameInput","urlInput","imagePopup","popupImage","popupCaption","addButton","addPopup","editButton","popUps","editPopup","confirmPopup","closeButtons","cardIdForDeletion","selectedCardElement","cardCallbacks","cardElement","cardId","endpoint","fetch","method","then","toggleLike","updatedCard","toggle","catch","log","_ref","setLoadingState","button","isLoading","text","arguments","undefined","value","reset","popup","closeCross","evt","preventDefault","submitButton","body","JSON","stringify","addCard","prepend","err","finally","about","originalText","updateUserInfo","userData","card","appendChild","this","closest","formSelector","currentFormElement","test","validateForm","setEventListeners","enableValidation","all","_ref2","_ref3","cards","avatar","profileImage","backgroundImage","confirmButton"],"sourceRoot":""}