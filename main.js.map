{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    }\r\n];","//Класс, который будет добавлять окну состояние «открыто»\r\nconst popupOpenedClass = 'popup_is-opened';\r\n\r\n\r\n//Ф-я открытия модального окна\r\nexport function openModal(popupElement) {\r\n    popupElement.classList.add(popupOpenedClass);\r\n     //Закрытие по Esc\r\n     document.addEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n   //Ф-я закрытия модального окна\r\n export function closeModal(popupElement) {\r\n    popupElement.classList.remove(popupOpenedClass);\r\n     //Удаление обработчика событий\r\n     document.removeEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n//Обработчик нажатия клавиши Esc\r\n function handleEscClose(event) {\r\n     if (event.key === 'Escape') {\r\n       const openedPopup = document.querySelector(\".popup_is-opened\");\r\n     if (openedPopup) {\r\n       closeModal(openedPopup);\r\n     }\r\n   }\r\n  }\r\n\r\n//Закрытие по оверлей\r\nexport function closeOverlay(event) {\r\n  if (event.target === event.currentTarget) {\r\n    closeModal(event.currentTarget);\r\n  }\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-42',\r\n  headers: {\r\n    authorization: 'f81b68a9-e064-468a-9e6e-9f668a7a60c1',\r\n    'Content-Type': 'application/json',\r\n  }\r\n};\r\n\r\n// Функция для обработки ответа\r\nconst handleResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Получение начальных карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление данных профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Постановка лайка и снятие\r\nexport const toggleLike = (cardId,isLiked) => {\r\n   const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n   const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\",\r\n   }\r\n  return fetch(endpoint, fetchOptions)\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};","import { toggleLike } from \"./api\";\r\n\r\nconst template = document.querySelector(\"#card-template\").content;\r\n\r\nexport function deleteCard(cardElement) {\r\n  cardElement.remove(); // Удаляет элемент карточки из DOM\r\n};\r\n\r\nexport function likeCard(likeButton, cardId, isLiked, likeCounter) {\r\n// Вызываем API на сервере\r\n  toggleLike(cardId, isLiked)\r\n    .then((updatedCard) => {\r\n      likeCounter.textContent = updatedCard.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\r\n}\r\n\r\nexport function createCard(cardData, callbacks, usersId) {\r\n  const clonedTemplate = template.querySelector('.card').cloneNode(true);\r\n\r\n  // Получаем вложенные элементы\r\n  const titleElement = clonedTemplate.querySelector(\".card__title\");\r\n  const imageElement = clonedTemplate.querySelector(\".card__image\");\r\n  const likeButton = clonedTemplate.querySelector('.card__like-button');\r\n  const deleteButton = clonedTemplate.querySelector('.card__delete-button');\r\n  const likeCounter = clonedTemplate.querySelector(\".card__like-counter\");\r\n\r\nif (!cardData || !cardData.owner) {\r\n  console.error('cardData or owner is undefined:', cardData);\r\n  return;\r\n  }\r\nconst ownerId = cardData.owner._id; // Присваиваем значение ownerId\r\n\r\n// Проверка, является ли текущий пользователь владельцем карточки\r\nif (ownerId !== usersId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n// Добавляем обработчик клика на кнопку удаления\r\n  deleteButton.addEventListener(\"click\", () => {\r\n  callbacks.deleteFunction(clonedTemplate); // Вызываем колбэк с элементом карточки\r\n  });\r\n}\r\n  \r\nconst isLiked = cardData.likes.some(like => like._id === usersId);\r\n\r\n  // Устанавливаем значения\r\n  titleElement.textContent = cardData.name;\r\n  imageElement.alt = cardData.name;\r\n  imageElement.src = cardData.link;\r\n  likeCounter.textContent = cardData.likes.length || \"\";\r\n\r\n  // Добавляем обработчик клика для кнопки лайка\r\n  likeButton.addEventListener('click', () => {\r\n    callbacks.likeFunction(likeButton, cardData._id, isLiked, likeCounter);\r\n  });\r\n\r\n  imageElement.addEventListener('click', () => \r\n    callbacks.onCardClickFunction(cardData));\r\n  return clonedTemplate;\r\n}","// Функция для отображения ошибки\r\nconst showError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElements.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputElement);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\n// Функция для очистки ошибок\r\nconst hideError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n}\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some(inputElement => !inputElement.validity.valid);\r\n};\r\n\r\nconst isValid = (formElement, inputElement, validationConfig) => {\r\n  const regex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]+$/;\r\n  const errorMessage = \"Разрешены только латинские, кириллические буквы, знаки дефиса и пробелы\";\r\n    if (!regex.test(inputElement.value)) {\r\n      inputElement.setCustomValidity(errorMessage);\r\n    } else {\r\n      inputElement.setCustomValidity(\"\");\r\n    }\r\n    if (!inputElement.validity.valid) {\r\n      showError(formElement, inputElement, inputElement.validationMessage || errorMessage, validationConfig);\r\n    } else {\r\n      hideError(formElement, inputElement, validationConfig);\r\n    }\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, validationConfig);\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(formElement.querySelectorAll(validationConfig.formSelector));\r\n\r\n    formList.forEach((formElement) => {\r\n      setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  \r\n    inputList.forEach((inputElement) => {\r\n      hideError(formElement, inputElement, validationConfig);\r\n        inputElement.setCustomValidity(\"\"); \r\n  });\r\n\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n};","import './index.css'; // добавьте импорт главного файла стилей\r\nimport { initialCards } from './scripts/cards.js'; // импорт картинок\r\nimport { openModal, closeModal, closeOverlay } from './components/modal.js'; // импорт модалок\r\nimport { deleteCard, likeCard, createCard } from './components/card.js';\r\nimport { enableValidation, clearValidation } from './components/validation.js'; // Импортируем валидацию\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addCard, removeCard, addLike, updateAvatar }\r\nfrom './components/api.js';\r\n\r\n// Контейнер с карточками\r\nconst placesList = document.querySelector('.places__list');\r\n// Редактирование профиля\r\nconst formEditProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\r\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n// Назначение\r\nconst formNewPlace = document.forms[\"new-place\"];\r\nconst cardNameInput = formNewPlace.querySelector('.popup__input_type_card-name');\r\nconst urlInput = formNewPlace.querySelector('.popup__input_type_url');\r\nconst imagePopup =   document.querySelector('.popup_type_image');\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nconst addButton =  document.querySelector('.profile__add-button'); // Кнопка доб-ия карточек\r\nconst addPopup =   document.querySelector('.popup_type_new-card'); // Доб-ие карточки\r\n\r\nconst editButton =  document.querySelector('.profile__edit-button'); // Ред-ие профиля\r\nconst popUps = document.querySelectorAll(\".popup\"); // Попапы\r\nconst editPopup =   document.querySelector('.popup_type_edit'); // Ред-ие\r\n\r\nconst popupAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\nconst avatarForm = document.forms[\"edit-avatar\"];\r\nconst avatarInput = avatarForm.querySelector('input[name=\"avatar\"]');\r\nconst avatarError = avatarForm.querySelector(\".form__input_avatar-error\");\r\nconst deleteConfirmationPopup = document.querySelector(\".popup_type_confirm\");\r\nconst profileName = document.querySelector('.profile__title');\r\nconst profileJob = document.querySelector('.profile__description');\r\nconst profileImage = document.querySelector('.profile__image');\r\n\r\nlet userId;\r\nlet cardIdForDeletion = null;\r\nlet selectedCardElement = null;\r\n\r\nfunction openCardPopup({link, name}) {\r\n  popupCaption.textContent = name;\r\n  popupImage.alt = name;\r\n  popupImage.src = link;\r\n  openModal(imagePopup);\r\n}\r\n\r\nconst cardCallbacks = {\r\n  deleteFunction: deleteCard,\r\n  likeFunction: likeCard,\r\n  onCardClickFunction: openCardPopup,\r\n}\r\n\r\n// Обработчик для добавления нового места\r\nfunction handleNewPlaceFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = cardNameInput.value;\r\n  const link = urlInput.value;\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем данные\r\n  addCard(name, link)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(cardData, cardCallbacks, userId); // Передаем userId \r\n      placesList.prepend(cardElement); // Используем placesList для подстановки карточки\r\n\r\n      formNewPlace.reset(); // Использование formNewPlace для сброса формы\r\n      closeModal(addPopup); // Закрытие попапа добавления карточек\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = \"Сохранить\";\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n// Обработчик для редактирования профиля\r\nfunction handleEditFormSubmit(evt) {\r\n    evt.preventDefault();\r\n    const name = nameInput.value; // Используем переменную nameInput\r\n    const about = jobInput.value; // Используем переменную jobInput\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  updateUserInfo(name, about)\r\n    .then((userData) => {\r\n      profileName.textContent = userData.name; // Используем profileName\r\n      profileJob.textContent = userData.about; // Используем profileJob\r\n      closeModal(editPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false; // Разблокируем кнопку отправки\r\n    });\r\n}\r\n\r\nfunction handleAvatarUpdate(evt) {\r\n  evt.preventDefault();\r\n\r\n  const submitButton = avatarForm.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем новый аватар на сервер\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка обновления аватара:\", err);\r\n      avatarError.textContent = \"Не удалось обновить аватар\"; // Выводим ошибку для пользователя\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false; // Разблокируем кнопку\r\n    });\r\n}\r\n\r\n// Подключение обработчика к форме\r\navatarForm.addEventListener(\"submit\", updateAvatar);\r\n\r\n// Обработчик клика на аватар, для открытия попапа редактирования аватара\r\nprofileImage.addEventListener(\"click\", openAvatarPopup);\r\n\r\n// Функция, открывающая попап для изменения аватара\r\nfunction openAvatarPopup() {\r\n  // Сбрасываем форму перед открытием попапа\r\n  avatarForm.reset();\r\n\r\n  // Очищаем ошибки валидации, если они есть\r\n  clearValidation(avatarForm, validationConfig);\r\n\r\n  // Открываем модальное окно редактирования аватара\r\n  if (popupAvatar) {\r\n    openModal(popupAvatar);\r\n  } else {\r\n    console.error(\"Попап для редактирования аватара не найден!\");\r\n  }\r\n}\r\n\r\n// Слушатели событий\r\neditButton.addEventListener(\"click\", () => {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  openModal(editPopup);\r\n})\r\n\r\naddButton.addEventListener(\"click\", () => {\r\n  formNewPlace.reset();\r\n  openModal(addPopup);\r\n})\r\n\r\n// Предотвращение отправки формы при нажатии Esc в попапах\r\npopUps.forEach((popup) => {\r\n  const closeCross = popup.querySelector(\".popup_close\");\r\n    if (closeCross) {\r\n    closeCross.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n    });\r\n  }\r\n  popup.addEventListener(\"click\", closeOverlay);\r\n  // Добавляем модификатор popup_is-animated модальному окну\r\n  popup.classList.add(\"popup_is-animated\");\r\n})\r\n\r\n// Подключение формы к обработчикам\r\nformNewPlace.addEventListener(\"submit\", handleNewPlaceFormSubmit);\r\nformEditProfile.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n// Показать все карточки\r\ninitialCards.forEach((cardData) => {\r\n  const card = createCard(cardData, cardCallbacks); // Передаём removeCard в качестве колбека\r\n  placesList.appendChild(card);\r\n})\r\n\r\n// Включение валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n}\r\n\r\nenableValidation(validationConfig, formEditProfile);\r\n\r\n// Функции отрисовки карточек\r\nfunction renderCards(cardsData) {\r\n  cardsData.forEach((cardData) => {\r\n    const card = createCard(cardData, cardCallbacks);\r\n    placesList.appendChild(card);\r\n  })\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    if (userData.avatar) {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n    }\r\n    renderCards(cards);\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Ошибка обновления:\", err);\r\n  });\r\n\r\n// Ф-ия для удаления карточки\r\nfunction handleCardDelete (cardElement, cardId) {\r\n  cardIdForDeletion = cardId;\r\n  selectedCardElement = cardElement;\r\n  openModal(deleteConfirmationPopup);\r\n}\r\n\r\n// Пример переписанной функции handleConfirm с учетом ваших переменных\r\nconst handleConfirm = (evt) => {\r\n  evt.preventDefault();\r\n\r\n  // Блокируем кнопку подтверждения\r\n  const confirmButton = deleteConfirmationPopup.querySelector(\".popup__button\"); // Найдите кнопку внутри попапа\r\n  confirmButton.textContent = \"Удаление...\";\r\n  confirmButton.disabled = true;\r\n\r\n  // Отправляем запрос на сервер для удаления карточки\r\n  removeCard(cardIdForDeletion)\r\n    .then(() => {\r\n  // Удаляем карточку из DOM\r\n    selectedCardElement.remove();\r\n    closeModal(deleteConfirmationPopup); // Закрываем попап подтверждения\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Ошибка при удалении карточки: ${error}`);\r\n    })\r\n    .finally(() => {\r\n      // Восстанавливаем текст и состояние кнопки\r\n      confirmButton.textContent = \"Да\";\r\n      confirmButton.disabled = false;\r\n    });\r\n};\r\n"],"names":["popupOpenedClass","openModal","popupElement","classList","add","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","event","key","openedPopup","querySelector","closeOverlay","target","currentTarget","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","template","content","createCard","cardData","callbacks","usersId","clonedTemplate","cloneNode","titleElement","imageElement","likeButton","deleteButton","likeCounter","owner","_id","style","display","deleteFunction","isLiked","likes","some","like","textContent","name","alt","src","link","length","likeFunction","onCardClickFunction","console","error","hideError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","userId","placesList","formEditProfile","forms","nameInput","jobInput","profileTitle","profileDescription","formNewPlace","cardNameInput","urlInput","imagePopup","popupImage","popupCaption","addButton","addPopup","editButton","popUps","querySelectorAll","editPopup","popupAvatar","avatarForm","profileName","profileJob","profileImage","cardCallbacks","cardElement","cardId","endpoint","fetch","method","then","toggleLike","updatedCard","toggle","catch","log","_ref","avatarUrl","body","JSON","stringify","avatar","reset","Array","from","inputSelector","forEach","setCustomValidity","submitButtonSelector","clearValidation","value","popup","closeCross","evt","preventDefault","submitButton","addCard","prepend","err","finally","about","originalText","updateUserInfo","userData","card","appendChild","formSelector","errorMessage","test","inputElements","showError","validationMessage","isValid","setEventListeners","enableValidation","all","_ref2","_ref3","cards","backgroundImage"],"sourceRoot":""}