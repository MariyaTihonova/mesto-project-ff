{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n      owner: {\r\n      _id: \"id_владельца\"\r\n    },\r\n      likes: []\r\n    }\r\n];","//Класс, который будет добавлять окну состояние «открыто»\r\nconst popupOpenedClass = 'popup_is-opened';\r\n\r\n\r\n//Ф-я открытия модального окна\r\nexport function openModal(popupElement) {\r\n    popupElement.classList.add(popupOpenedClass);\r\n     //Закрытие по Esc\r\n     document.addEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n   //Ф-я закрытия модального окна\r\n export function closeModal(popupElement) {\r\n    popupElement.classList.remove(popupOpenedClass);\r\n     //Удаление обработчика событий\r\n     document.removeEventListener('keydown', handleEscClose);\r\n   }\r\n\r\n//Обработчик нажатия клавиши Esc\r\n function handleEscClose(event) {\r\n     if (event.key === 'Escape') {\r\n       const openedPopup = document.querySelector(\".popup_is-opened\");\r\n     if (openedPopup) {\r\n       closeModal(openedPopup);\r\n     }\r\n   }\r\n  }\r\n\r\n//Закрытие по оверлей\r\nexport function closeOverlay(event) {\r\n  if (event.target === event.currentTarget) {\r\n    closeModal(event.currentTarget);\r\n  }\r\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-42',\r\n  headers: {\r\n    authorization: 'f81b68a9-e064-468a-9e6e-9f668a7a60c1',\r\n    'Content-Type': 'application/json',\r\n  }\r\n};\r\n\r\n// Функция для обработки ответа\r\nconst handleResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Получение начальных карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление данных профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Постановка лайка и снятие\r\nexport const toggleLike = (cardId,isLiked) => {\r\n   const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n   const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\",\r\n   }\r\n  return fetch(endpoint, fetchOptions)\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление аватара\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    })\r\n  })\r\n    .then(handleResponse);\r\n};","import { toggleLike } from \"./api\";\r\n\r\nconst template = document.querySelector(\"#card-template\").content;\r\n\r\nexport function deleteCard(cardElement) {\r\n  cardElement.remove(); // Удаляет элемент карточки из DOM\r\n};\r\n\r\nexport function likeCard(likeButton, cardId, isLiked, likeCounter) {\r\n// Вызываем API на сервере\r\n  toggleLike(cardId, isLiked)\r\n    .then((updatedCard) => {\r\n      likeCounter.textContent = updatedCard.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\r\n}\r\n\r\nexport function createCard(cardData, callbacks, usersId) {\r\n  const clonedTemplate = template.querySelector('.card').cloneNode(true);\r\n\r\n  // Получаем вложенные элементы\r\n  const titleElement = clonedTemplate.querySelector(\".card__title\");\r\n  const imageElement = clonedTemplate.querySelector(\".card__image\");\r\n  const likeButton = clonedTemplate.querySelector('.card__like-button');\r\n  const deleteButton = clonedTemplate.querySelector('.card__delete-button');\r\n  const likeCounter = clonedTemplate.querySelector(\".card__like-counter\");\r\n\r\nif (!cardData || !cardData.owner) {\r\n  console.error('cardData or owner is undefined:', cardData);\r\n  return;\r\n  }\r\nconst ownerId = cardData.owner._id; // Присваиваем значение ownerId\r\n\r\n// Проверка, является ли текущий пользователь владельцем карточки\r\nif (ownerId !== usersId) {\r\n  deleteButton.style.display = 'none';\r\n} else {\r\n// Добавляем обработчик клика на кнопку удаления\r\n  deleteButton.addEventListener(\"click\", () => {\r\n  callbacks.deleteFunction(clonedTemplate); // Вызываем колбэк с элементом карточки\r\n  });\r\n}\r\n  \r\nconst isLiked = cardData.likes.some(like => like._id === usersId);\r\n\r\n  // Устанавливаем значения\r\n  titleElement.textContent = cardData.name;\r\n  imageElement.alt = cardData.name;\r\n  imageElement.src = cardData.link;\r\n  likeCounter.textContent = cardData.likes.length || \"\";\r\n\r\n  // Добавляем обработчик клика для кнопки лайка\r\n  likeButton.addEventListener('click', () => {\r\n    callbacks.likeFunction(likeButton, cardData._id, isLiked, likeCounter);\r\n  });\r\n\r\n  imageElement.addEventListener('click', () => \r\n    callbacks.onCardClickFunction(cardData));\r\n  return clonedTemplate;\r\n}","// Функция для отображения ошибки\r\nconst showError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElements.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputElement);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\n// Функция для очистки ошибок\r\nconst hideError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n}\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some(inputElement => !inputElement.validity.valid);\r\n};\r\n\r\nconst isValid = (formElement, inputElement, validationConfig) => {\r\n  const regex = /^[a-zA-Zа-яА-ЯёЁ0-9\\- ]+$/;\r\n  const errorMessage = \"Разрешены только латинские, кириллические буквы, знаки дефиса и пробелы\";\r\n    if (!regex.test(inputElement.value)) {\r\n      inputElement.setCustomValidity(errorMessage);\r\n    } else {\r\n      inputElement.setCustomValidity(\"\");\r\n    }\r\n    if (!inputElement.validity.valid) {\r\n      showError(formElement, inputElement, inputElement.validationMessage || errorMessage, validationConfig);\r\n    } else {\r\n      hideError(formElement, inputElement, validationConfig);\r\n    }\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, validationConfig);\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(formElement.querySelectorAll(validationConfig.formSelector));\r\n\r\n    formList.forEach((formElement) => {\r\n      setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  \r\n    inputList.forEach((inputElement) => {\r\n      hideError(formElement, inputElement, validationConfig);\r\n        inputElement.setCustomValidity(\"\"); \r\n  });\r\n\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n};","import './index.css'; // добавьте импорт главного файла стилей\r\nimport { initialCards } from './scripts/cards.js'; // импорт картинок\r\nimport { openModal, closeModal, closeOverlay } from './components/modal.js'; // импорт модалок\r\nimport { deleteCard, likeCard, createCard } from './components/card.js';\r\nimport { enableValidation, clearValidation } from './components/validation.js'; // Импортируем валидацию\r\nimport { getUserInfo, getInitialCards, updateUserInfo, addCard, removeCard, addLike, updateAvatar }\r\nfrom './components/api.js';\r\n\r\n// Контейнер с карточками\r\nconst placesList = document.querySelector('.places__list');\r\n// Редактирование профиля\r\nconst formEditProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\r\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\n// Назначение\r\nconst formNewPlace = document.forms[\"new-place\"];\r\nconst cardNameInput = formNewPlace.querySelector('.popup__input_type_card-name');\r\nconst urlInput = formNewPlace.querySelector('.popup__input_type_url');\r\nconst imagePopup =   document.querySelector('.popup_type_image');\r\nconst popupImage = imagePopup.querySelector('.popup__image');\r\nconst popupCaption = imagePopup.querySelector('.popup__caption');\r\n\r\nconst addButton =  document.querySelector('.profile__add-button'); // Кнопка доб-ия карточек\r\nconst addPopup =   document.querySelector('.popup_type_new-card'); // Доб-ие карточки\r\n\r\nconst editButton =  document.querySelector('.profile__edit-button'); // Ред-ие профиля\r\nconst popUps = document.querySelectorAll(\".popup\"); // Попапы\r\nconst editPopup =   document.querySelector('.popup_type_edit'); // Ред-ие\r\n\r\nconst deleteConfirmationPopup = document.querySelector(\".popup_type_confirm\");\r\nconst profileName = document.querySelector('.profile__title');\r\nconst profileJob = document.querySelector('.profile__description');\r\nconst profileImage = document.querySelector('.profile__image');\r\n\r\nlet userId;\r\nlet cardIdForDeletion = null;\r\nlet selectedCardElement = null;\r\n\r\nfunction openCardPopup({link, name}) {\r\n  popupCaption.textContent = name;\r\n  popupImage.alt = name;\r\n  popupImage.src = link;\r\n  openModal(imagePopup);\r\n}\r\n\r\nconst cardCallbacks = {\r\n  deleteFunction: deleteCard,\r\n  likeFunction: likeCard,\r\n  onCardClickFunction: openCardPopup,\r\n}\r\n\r\n// Обработчик для добавления нового места\r\nfunction handleNewPlaceFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = cardNameInput.value;\r\n  const link = urlInput.value;\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем данные\r\n  addCard(name, link)\r\n    .then((cardData) => {\r\n      const cardElement = createCard(cardData, cardCallbacks, userId); // Передаем userId \r\n      placesList.prepend(cardElement); // Используем placesList для подстановки карточки\r\n\r\n      formNewPlace.reset(); // Использование formNewPlace для сброса формы\r\n      closeModal(addPopup); // Закрытие попапа добавления карточек\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = \"Сохранить\";\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n// Обработчик для редактирования профиля\r\nfunction handleEditFormSubmit(evt) {\r\n    evt.preventDefault();\r\n    const name = nameInput.value; // Используем переменную nameInput\r\n    const about = jobInput.value; // Используем переменную jobInput\r\n\r\n// Блокируем кнопку\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  updateUserInfo(name, about)\r\n    .then((userData) => {\r\n      profileName.textContent = userData.name; // Используем profileName\r\n      profileJob.textContent = userData.about; // Используем profileJob\r\n      closeModal(editPopup);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", err);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false; // Разблокируем кнопку отправки\r\n    });\r\n}\r\n\r\n// Слушатели событий\r\neditButton.addEventListener(\"click\", () => {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  openModal(editPopup);\r\n})\r\n\r\naddButton.addEventListener(\"click\", () => {\r\n  formNewPlace.reset();\r\n  openModal(addPopup);\r\n})\r\n\r\n// Предотвращение отправки формы при нажатии Esc в попапах\r\npopUps.forEach((popup) => {\r\n  const closeCross = popup.querySelector(\".popup_close\");\r\n    if (closeCross) {\r\n    closeCross.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n    });\r\n  }\r\n  popup.addEventListener(\"click\", closeOverlay);\r\n  // Добавляем модификатор popup_is-animated модальному окну\r\n  popup.classList.add(\"popup_is-animated\");\r\n})\r\n\r\n// Подключение формы к обработчикам\r\nformNewPlace.addEventListener(\"submit\", handleNewPlaceFormSubmit);\r\nformEditProfile.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n// Показать все карточки\r\ninitialCards.forEach((cardData) => {\r\n  const card = createCard(cardData, cardCallbacks); // Передаём removeCard в качестве колбека\r\n  placesList.appendChild(card);\r\n})\r\n\r\n// Включение валидации\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n}\r\n\r\nenableValidation(validationConfig, formEditProfile);\r\n\r\n// Функции отрисовки карточек\r\nfunction renderCards(cardsData) {\r\n  cardsData.forEach((cardData) => {\r\n    const card = createCard(cardData, cardCallbacks);\r\n    placesList.appendChild(card);\r\n  })\r\n}\r\n\r\nPromise.all([getUserInfo(), getInitialCards()])\r\n  .then(([userData, cards]) => {\r\n    userId = userData._id;\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    if (userData.avatar) {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n    }\r\n    renderCards(cards);\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Ошибка обновления:\", err);\r\n  });\r\n\r\n// Ф-ия для удаления карточки\r\nfunction handleCardDelete (cardElement, cardId) {\r\n  cardIdForDeletion = cardId;\r\n  selectedCardElement = cardElement;\r\n  openModal(deleteConfirmationPopup);\r\n}\r\n\r\n// Пример переписанной функции handleConfirm с учетом ваших переменных\r\nconst handleConfirm = (evt) => {\r\n  evt.preventDefault();\r\n\r\n  // Блокируем кнопку подтверждения\r\n  const confirmButton = deleteConfirmationPopup.querySelector(\".popup__button\"); // Найдите кнопку внутри попапа\r\n  confirmButton.textContent = \"Удаление...\";\r\n  confirmButton.disabled = true;\r\n\r\n  // Отправляем запрос на сервер для удаления карточки\r\n  removeCard(cardIdForDeletion)\r\n    .then(() => {\r\n  // Удаляем карточку из DOM\r\n    selectedCardElement.remove();\r\n    closeModal(deleteConfirmationPopup); // Закрываем попап подтверждения\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Ошибка при удалении карточки: ${error}`);\r\n    })\r\n    .finally(() => {\r\n      // Восстанавливаем текст и состояние кнопки\r\n      confirmButton.textContent = \"Да\";\r\n      confirmButton.disabled = false;\r\n    });\r\n};\r\n"],"names":["popupOpenedClass","openModal","popupElement","classList","add","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","event","key","openedPopup","querySelector","closeOverlay","target","currentTarget","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","template","content","createCard","cardData","callbacks","usersId","clonedTemplate","cloneNode","titleElement","imageElement","likeButton","deleteButton","likeCounter","owner","_id","style","display","deleteFunction","isLiked","likes","some","like","textContent","name","alt","src","link","length","likeFunction","onCardClickFunction","console","error","toggleButtonState","inputList","buttonElement","validationConfig","inputElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","userId","placesList","formEditProfile","forms","nameInput","jobInput","profileTitle","profileDescription","formNewPlace","cardNameInput","urlInput","imagePopup","popupImage","popupCaption","addButton","addPopup","editButton","popUps","querySelectorAll","editPopup","profileName","profileJob","profileImage","cardCallbacks","cardElement","cardId","endpoint","fetch","method","then","toggleLike","updatedCard","toggle","catch","log","_ref","value","reset","forEach","popup","closeCross","evt","preventDefault","submitButton","body","JSON","stringify","addCard","prepend","err","finally","about","originalText","updateUserInfo","userData","card","appendChild","formSelector","inputSelector","submitButtonSelector","inputErrorClass","errorClass","Array","from","formElement","errorMessage","test","setCustomValidity","errorElement","id","hideError","inputElements","showError","validationMessage","isValid","setEventListeners","all","_ref2","_ref3","cards","avatar","backgroundImage"],"sourceRoot":""}