{"version":3,"file":"main.js","mappings":"mBAAO,ICCDA,EAAmB,kBAIlB,SAASC,EAAUC,GACtBA,EAAaC,UAAUC,IAAIJ,GAE1BK,SAASC,iBAAiB,UAAWC,EACvC,CAGK,SAASC,EAAWN,GACxBA,EAAaC,UAAUM,OAAOT,GAE7BK,SAASK,oBAAoB,UAAWH,EAC1C,CAGF,SAASA,EAAeI,GACpB,GAAkB,WAAdA,EAAMC,IAAkB,CAC1B,IAAMC,EAAcR,SAASS,cAAc,oBACzCD,GACFL,EAAWK,EAEf,CACD,CAGK,SAASE,EAAaJ,GACvBA,EAAMK,SAAWL,EAAMM,eACzBT,EAAWG,EAAMM,cAErB,CCjCA,IAAMC,EAAS,CACbC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAKdC,EAAiB,SAACC,GACtB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACvC,ECZMC,EAAWzB,SAASS,cAAc,kBAAkBiB,QAEnD,SAASC,EAAWC,EAAUC,EAAWC,GAC9C,IAAMC,EAAiBN,EAAShB,cAAc,SAASuB,WAAU,GAG3DC,EAAeF,EAAetB,cAAc,gBAC5CyB,EAAeH,EAAetB,cAAc,gBAC5C0B,EAAaJ,EAAetB,cAAc,sBAC1C2B,EAAeL,EAAetB,cAAc,wBAC5C4B,EAAcN,EAAetB,cAAc,uBAEnD,GAAKmB,GAAaA,EAASU,MAA3B,CAIgBV,EAASU,MAAMC,MAGfT,EACdM,EAAaI,MAAMC,QAAU,OAG7BL,EAAanC,iBAAiB,QAAS,WACvC4B,EAAUa,eAAeX,EACzB,GAGF,IAAMY,EAAUf,EAASgB,MAAMC,KAAK,SAAAC,GAAI,OAAIA,EAAKP,MAAQT,CAAO,GAgB9D,OAbAG,EAAac,YAAcnB,EAASoB,KACpCd,EAAae,IAAMrB,EAASoB,KAC5Bd,EAAagB,IAAMtB,EAASuB,KAC5Bd,EAAYU,YAAcnB,EAASgB,MAAMQ,QAAU,GAGnDjB,EAAWlC,iBAAiB,QAAS,WACnCoD,QAAQC,IAAI,UAAW1B,EAASW,KAChCV,EAAU0B,aAAapB,EAAYP,EAASW,IAAKI,EAASN,EAC5D,GAEAH,EAAajC,iBAAiB,QAAS,kBACrC4B,EAAU2B,oBAAoB5B,EAAS,GAClCG,CA7BP,CAFAsB,QAAQI,MAAM,kCAAmC7B,EAgCnD,CC9CA,IAAM8B,EAAY,SAACC,EAAaC,EAAcC,EAAcC,GAC1D,IAAMC,EAAeJ,EAAYlD,cAAc,IAADc,OAAKqC,EAAaI,GAAE,WAClEJ,EAAa9D,UAAUC,IAAI+D,EAAiBG,iBAC5CF,EAAahB,YAAcc,EAC3BE,EAAajE,UAAUC,IAAI+D,EAAiBI,WAC9C,EAGMC,EAAY,SAACR,EAAaC,EAAcE,GAC5C,IAAMC,EAAeJ,EAAYlD,cAAc,IAADc,OAAKqC,EAAaI,GAAE,WAClEJ,EAAa9D,UAAUM,OAAO0D,EAAiBG,iBAC/CF,EAAajE,UAAUM,OAAO0D,EAAiBI,YAC/CH,EAAahB,YAAc,EAC7B,EAyCA/C,SAASC,iBAAiB,oBAC1B,IAAMmE,EAAoB,SAACT,EAAaG,EAAkBO,GACxD,IACMC,EADYC,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBAJ1D7B,KAAK,SAAAe,GAAY,OAAKA,EAAae,SAASC,KAAK,GAO9DP,IACFA,EAAcQ,SAAWP,GAGvBA,EACFD,EAAcvE,UAAUC,IAAI+D,EAAiBgB,qBAE3CT,EAAcvE,UAAUM,OAAO0D,EAAiBgB,oBAEtD,EAwBaC,EAAkB,SAACpB,EAAaG,GACzBS,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBAE/DM,QAAQ,SAACpB,GACjBO,EAAUR,EAAaC,EAAcE,GACnCF,EAAaqB,kBAAkB,GACrC,GAEE,IAAMZ,EAAgBV,EAAYlD,cAAcqD,EAAiBoB,sBAC7Db,IACFA,EAAcQ,UAAW,EACzBR,EAAcvE,UAAUC,IAAI+D,EAAiBgB,qBAEnD,E,sGClGA,IA6BIK,EA7BEC,EAAapF,SAASS,cAAc,iBAEpC4E,EAAkBrF,SAASsF,MAAM,gBACjCC,EAAYF,EAAgB5E,cAAc,2BAC1C+E,EAAWH,EAAgB5E,cAAc,kCACzCgF,EAAezF,SAASS,cAAc,mBACtCiF,EAAqB1F,SAASS,cAAc,yBAE5CkF,EAAe3F,SAASsF,MAAM,aAC9BM,EAAgBD,EAAalF,cAAc,gCAC3CoF,EAAWF,EAAalF,cAAc,0BACtCqF,EAAe9F,SAASS,cAAc,qBACtCsF,EAAaD,EAAWrF,cAAc,iBACtCuF,EAAeF,EAAWrF,cAAc,mBAExCwF,EAAajG,SAASS,cAAc,wBACpCyF,EAAalG,SAASS,cAAc,wBAEpC0F,EAAcnG,SAASS,cAAc,yBACrC2F,EAASpG,SAASyE,iBAAiB,UACnC4B,EAAcrG,SAASS,cAAc,oBACrC6F,EAAetG,SAASS,cAAc,uBAEtC8F,GADgBD,EAAa7F,cAAc,iBAC5BT,SAASyE,iBAAiB,kBACzC+B,EAAcxG,SAASS,cAAc,2BACrCgG,EAAczG,SAASS,cAAc,iBACrCiG,EAAgB1G,SAASS,cAAc,mBACvCkG,EAAiBH,EAAY/F,cAAc,gBAG7CmG,EAAoB,KACpBC,EAAsB,KASpBC,EAAgB,CACpBpE,eA2IF,SAAqBqE,EAAaC,GAChCJ,EAAoBI,EACpBH,EAAsBE,EACtBnH,EAAU0G,EACZ,EA9IE/C,aFDK,SAAkBpB,EAAY6E,EAAQrE,EAASN,IDa5B,SAAC2E,EAAOrE,GAC/B,IAAMsE,EAAW,GAAH1F,OAAMV,EAAOC,QAAO,iBAAAS,OAAgByF,GAKnD,OAAOE,MAAMD,EAJS,CACpBlG,QAASF,EAAOE,QAChBoG,OAAQxE,EAAU,SAAW,QAG5ByE,KAAKnG,EACV,ECnBEoG,CAAWL,EAAQrE,GAChByE,KAAK,SAACE,GACLjF,EAAYU,YAAcuE,EAAY1E,MAAMQ,OAC5CjB,EAAWrC,UAAUyH,OAAO,8BAC9B,GACCC,MAAM,SAAC/D,GAAK,OAAKJ,QAAQC,IAAI,8BAAD/B,OAA+BkC,GAAQ,EACxE,EENED,oBAVF,SAAsBiE,GAAe,IAAbtE,EAAIsE,EAAJtE,KAAMH,EAAIyE,EAAJzE,KAC5BgD,EAAajD,YAAcC,EAC3B+C,EAAW9C,IAAMD,EACjB+C,EAAW7C,IAAMC,EACjBvD,EAAUkG,EACZ,GAwDA,SAAS4B,EAAgBC,EAAQC,GAA+B,IAApBC,EAAIC,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAAG,YACjDH,EAAO5E,YAAc6E,EAAYC,EAAO,YACxCF,EAAO9C,SAAW+C,CACpB,CAGAzB,EAAWlG,iBAAiB,QAAS,WACnCsF,EAAUyC,MAAQvC,EAAa1C,YAC/ByC,EAASwC,MAAQtC,EAAmB3C,YACpCgC,EAAgBM,EAAiBvB,GACjClE,EAAUyG,EACZ,GAEAJ,EAAUhG,iBAAiB,QAAS,WAClC0F,EAAasC,QACblD,EAAgBY,EAAc7B,GAC9BlE,EAAUsG,EACZ,GAGAE,EAAOpB,QAAQ,SAACkD,GACd,IAAMC,EAAaD,EAAMzH,cAAc,gBACjC0H,GACJA,EAAWlI,iBAAiB,QAAS,WACrCE,EAAW+H,EACX,GAEFA,EAAMjI,iBAAiB,QAASS,GAEhCwH,EAAMpI,UAAUC,IAAI,oBACtB,GAGA4F,EAAa1F,iBAAiB,SAhF9B,SAAkCmI,GAChCA,EAAIC,iBACJ,IAAMrF,EAAO4C,EAAcoC,MACrB7E,EAAO0C,EAASmC,MAChBM,EAAeF,EAAIzH,OAAOF,cAAc,kBAE5CiH,EAAgBY,GAAc,EAAM,iBHlBjB,SAACtF,EAAMG,GAC5B,OAAO+D,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,UAAU,CACtCqG,OAAQ,OACRpG,QAASF,EAAOE,QAChBwH,KAAMC,KAAKC,UAAU,CAACzF,KAAAA,EAAKG,KAAAA,MAE1BiE,KAAKnG,EACV,CGcEyH,CAAQ1F,EAAMG,GACXiE,KAAK,SAACxF,GACL,IAAMmF,EAAcpF,EAAWC,EAAUkF,EAAe3B,GACxDC,EAAWuD,QAAQ5B,GACnBpB,EAAasC,QACb9H,EAAW+F,EACb,GACCsB,MAAM,SAACoB,GACNvF,QAAQI,MAAM,kCAAmCmF,EACnD,GACCC,QAAQ,WACPnB,EAAgBY,GAAc,EAChC,EACJ,GA2DAjD,EAAgBpF,iBAAiB,SAxDjC,SAA8BmI,GAC5BA,EAAIC,iBACJ,IAAMrF,EAAOuC,EAAUyC,MACjBc,EAAQtD,EAASwC,MACjBM,EAAeF,EAAIzH,OAAOF,cAAc,kBACxCsI,EAAeT,EAAavF,YAClC2E,EAAgBY,GAAc,EAAM,iBHrDR,SAACtF,EAAM8F,GACnC,OAAO5B,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,aAAa,CACzCqG,OAAQ,QACRpG,QAASF,EAAOE,QAChBwH,KAAMC,KAAKC,UAAU,CAACzF,KAAAA,EAAK8F,MAAAA,MAE1B1B,KAAKnG,EACV,CGgDE+H,CAAehG,EAAM8F,GAClB1B,KAAK,SAAC6B,GACLxD,EAAa1C,YAAckG,EAASjG,KACpC0C,EAAmB3C,YAAckG,EAASH,MAC1C3I,EAAWkG,EACb,GACCmB,MAAM,SAACoB,GACNvF,QAAQI,MAAM,iCAAkCmF,EAClD,GACCC,QAAQ,WACPnB,EAAgBY,GAAc,EAAOS,EACvC,EACJ,GLpG4B,CACxB,CACE/F,KAAM,QACNG,KAAM,gFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,sBACNG,KAAM,4FACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,UACNG,KAAM,iFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,WACNG,KAAM,mFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,qBACNG,KAAM,4FACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,IAET,CACEI,KAAM,SACNG,KAAM,gFACNb,MAAO,CACPC,IAAK,gBAELK,MAAO,KK4FAoC,QAAQ,SAACpD,GACpB,IAAMsH,EAAOvH,EAAWC,EAAUkF,GAClC1B,EAAW+D,YAAYD,EACzB,GAEA3C,EAAavB,QAAQ,SAAA2C,GACnBA,EAAO1H,iBAAiB,QAAS,WAE/BE,EADciJ,KAAKC,QAAQ,UAE7B,EACF,GAGA,IAAMvF,EAAmB,CACvBwF,aAAc,eACd5E,cAAe,gBACfQ,qBAAsB,iBACtBJ,oBAAqB,yBACrBb,gBAAiB,0BACjBC,WAAY,yBD1EkB,SAACJ,GACdS,MAAMC,KAAKxE,SAASyE,iBAAiBX,EAAiBwF,eAE9DtE,QAAQ,SAACuE,IAhBM,SAAC5F,EAAaG,GACtC,IAAM0F,EAAYjF,MAAMC,KAAKb,EAAYc,iBAAiBX,EAAiBY,gBACrEL,EAAgBV,EAAYlD,cAAcqD,EAAiBoB,sBAEjEsE,EAAUxE,QAAQ,SAACpB,GACjBA,EAAa3D,iBAAiB,QAAS,YA5DtB,SAAC0D,EAAaG,GACjC,IAAMyB,EAAY5B,EAAYlD,cAAcqD,EAAiBY,cAAgB,2BACvEc,EAAW7B,EAAYlD,cAAcqD,EAAiBY,cAAgB,kCAE1E,IAAKa,IAAcC,EAGf,OAFFnC,QAAQI,MAAM,iDACZJ,QAAQI,MAAM,4CAIf8B,EAAUZ,SAASC,QAClBW,EAAUZ,SAAS8E,aACrB/F,EAAUC,EAAa4B,EAAW,uCAAwCzB,GACnEyB,EAAUZ,SAAS8E,aAC1B/F,EAAWC,EAAa4B,EAAW,sFAAuFzB,GAE1HK,EAAUR,EAAa4B,EAAWzB,IAKjC0B,EAASb,SAASC,MAOrBT,EAAUR,EAAa6B,EAAU1B,GAN7B0B,EAASb,SAAS8E,aACpB/F,EAAUC,EAAa6B,EAAU,uCAAwC1B,GAChE0B,EAASb,SAAS+E,iBAC3BhG,EAAWC,EAAa4B,EAAW,sFAAuFzB,GAO9H,IAAMO,EAAgBV,EAAYlD,cAAcqD,EAAiBoB,sBACjEd,EAAkBT,EAAaG,EAAkBO,EACnD,CA2BMsF,CAAahG,EACVG,EACL,EACF,GACAM,EAAkBT,EAAaG,EAAkBO,EACnD,CAMIuF,CAAkBL,EAAoBzF,EACxC,EACF,CCuEA+F,CAAiB/F,GAUjBzC,QAAQyI,IAAI,CHzJH5C,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,aAAa,CACzCC,QAASF,EAAOE,UAEfqG,KAAKnG,GAKDiG,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,UAAU,CACtCC,QAASF,EAAOE,UAEfqG,KAAKnG,KG+IPmG,KAAK,SAAA2C,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBd,EAAQe,EAAA,GAAEC,EAAKD,EAAA,GACrB7E,EAAS8D,EAAS1G,IAClBkD,EAAa1C,YAAckG,EAASjG,KACpC0C,EAAmB3C,YAAckG,EAASH,MACtCG,EAASiB,OACXxD,EAAclE,MAAM2H,gBAAkB,QAAH5I,OAAW0H,EAASiB,OAAM,MAE/DxD,EAAclE,MAAM2H,gBAAkB,GAE1BF,EAhBJjF,QAAQ,SAACpD,GACjB,IAAMsH,EAAOvH,EAAWC,EAAUkF,GAClC1B,EAAW+D,YAAYD,EACzB,EAcA,GACC1B,MAAM,SAACoB,GACNvF,QAAQI,MAAM,qBAAsBmF,EACtC,GA8BFtC,EAAarG,iBAAiB,SArBR,SAACmI,GACrBA,EAAIC,iBAEJ,IHhJyBrB,EGgJnBoD,EAAgB9D,EAAa7F,cAAc,kBACjDiH,EAAgB0C,GAAe,EAAM,gBHjJZpD,EGmJdJ,EHlJJM,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,WAAAS,OAAUyF,GAAU,CAChDG,OAAQ,SACRpG,QAASF,EAAOE,UAEfqG,KAAKnG,IG+ILmG,KAAK,WAENP,EAAoBzG,SACpBD,EAAWmG,EACX,GACCkB,MAAM,SAAC/D,GACNJ,QAAQI,MAAM,iCAADlC,OAAkCkC,GACjD,GACCoF,QAAQ,WAENnB,EAAgB0C,GAAe,EAAO,KACzC,EACJ,GAUApK,SAASS,cAAc,gCAAgCR,iBAAiB,QALxE,WACEL,EAAU4G,EACZ,GAMAG,EAAe1G,iBAAiB,SAAU,SAACmI,GACzCA,EAAIC,iBAEJ,IAAMgC,EAAO5D,EAAY6D,MAAM,GAC/B,GAAID,EAAM,CACR,IAAME,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUJ,GH/JvB,SAAsBE,GAC3B,OAAOrD,MAAM,GAAD3F,OAAIV,EAAOC,QAAO,oBAAoB,CAChDqG,OAAQ,QACRpG,QAAS,CAACC,cAAeH,EAAOE,QAAQC,eACxCuH,KAAMgC,IAELnD,KAAKnG,EACV,CG2JAyJ,CAAaH,GACVnD,KAAK,SAACuD,GAELjE,EAAclE,MAAM2H,gBAAkB,QAAH5I,OAAWoJ,EAAKT,OAAM,MACzD/J,EAAWqG,EACX,GACDgB,MAAM,SAAC/D,GACNJ,QAAQI,MAAM,iCAAkCA,EAChD,EACF,MACEJ,QAAQI,MAAM,+BAElB,E","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n      owner: {\n      _id: \"id_владельца\"\n    },\n      likes: []\n    }\n]","//Класс, который будет добавлять окну состояние «открыто»\nconst popupOpenedClass = 'popup_is-opened';\n\n\n//Ф-я открытия модального окна\nexport function openModal(popupElement) {\n    popupElement.classList.add(popupOpenedClass);\n     //Закрытие по Esc\n     document.addEventListener('keydown', handleEscClose);\n   }\n\n   //Ф-я закрытия модального окна\n export function closeModal(popupElement) {\n    popupElement.classList.remove(popupOpenedClass);\n     //Удаление обработчика событий\n     document.removeEventListener('keydown', handleEscClose);\n   }\n\n//Обработчик нажатия клавиши Esc\n function handleEscClose(event) {\n     if (event.key === 'Escape') {\n       const openedPopup = document.querySelector(\".popup_is-opened\");\n     if (openedPopup) {\n       closeModal(openedPopup);\n     }\n   }\n  }\n\n//Закрытие по оверлей\nexport function closeOverlay(event) {\n  if (event.target === event.currentTarget) {\n    closeModal(event.currentTarget);\n  }\n}","const config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-42',\r\n  headers: {\r\n    authorization: 'f81b68a9-e064-468a-9e6e-9f668a7a60c1',\r\n    'Content-Type': 'application/json',\r\n  }\r\n};\r\n\r\n// Функция для обработки ответа\r\nconst handleResponse = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Получение начальных карточек\r\nexport const getInitialCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Обновление данных профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({name,about})\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Добавление новой карточки\r\nexport const addCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({name,link})\r\n  })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(handleResponse);\r\n};\r\n\r\n// Постановка лайка и снятие\r\nexport const toggleLike = (cardId,isLiked) => {\r\n   const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n   const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\",\r\n   }\r\n  return fetch(endpoint, fetchOptions)\r\n    .then(handleResponse);\r\n};\r\n\r\n// Функция для обновления аватара на сервере\r\nexport function updateAvatar(formData) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: {authorization: config.headers.authorization,},\r\n    body: formData,\r\n  })\r\n    .then(handleResponse);\r\n}","import { toggleLike } from \"./api\";\n\nconst template = document.querySelector(\"#card-template\").content;\n\nexport function createCard(cardData, callbacks, usersId) {\n  const clonedTemplate = template.querySelector('.card').cloneNode(true);\n\n  // Получаем вложенные элементы\n  const titleElement = clonedTemplate.querySelector(\".card__title\");\n  const imageElement = clonedTemplate.querySelector(\".card__image\");\n  const likeButton = clonedTemplate.querySelector('.card__like-button');\n  const deleteButton = clonedTemplate.querySelector('.card__delete-button');\n  const likeCounter = clonedTemplate.querySelector(\".card__like-counter\");\n\nif (!cardData || !cardData.owner) {\n  console.error('cardData or owner is undefined:', cardData);\n  return;\n  }\nconst ownerId = cardData.owner._id; // Присваиваем значение ownerId\n\n// Проверка, является ли текущий пользователь владельцем карточки\nif (ownerId !== usersId) {\n  deleteButton.style.display = 'none';\n} else {\n// Добавляем обработчик клика на кнопку удаления\n  deleteButton.addEventListener(\"click\", () => {\n  callbacks.deleteFunction(clonedTemplate); // Вызываем колбэк с элементом карточки\n  });\n}\n  \nconst isLiked = cardData.likes.some(like => like._id === usersId);\n\n  // Устанавливаем значения\n  titleElement.textContent = cardData.name;\n  imageElement.alt = cardData.name;\n  imageElement.src = cardData.link;\n  likeCounter.textContent = cardData.likes.length || \"\";\n\n  // Добавляем обработчик клика для кнопки лайка\n  likeButton.addEventListener('click', () => {\n    console.log('cardId:', cardData._id); // Проверьте, что cardId определён\n    callbacks.likeFunction(likeButton, cardData._id, isLiked, likeCounter);\n  });\n\n  imageElement.addEventListener('click', () => \n    callbacks.onCardClickFunction(cardData));\n  return clonedTemplate;\n}\n\nexport function likeCard(likeButton, cardId, isLiked, likeCounter) {\n// Вызываем API на сервере\n  toggleLike(cardId, isLiked)\n    .then((updatedCard) => {\n      likeCounter.textContent = updatedCard.likes.length;\n      likeButton.classList.toggle(\"card__like-button_is-active\");\n    })\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\n}","// Функция для отображения ошибки\r\nconst showError = (formElement, inputElement, errorMessage, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n}\r\n\r\n// Функция для очистки ошибок\r\nconst hideError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n}\r\n\r\nconst validateForm = (formElement, validationConfig) => {\r\n  const nameInput = formElement.querySelector(validationConfig.inputSelector + '.popup__input_type_name');\r\n  const jobInput = formElement.querySelector(validationConfig.inputSelector + '.popup__input_type_description');\r\n// Проверяем существование полей\r\n    if (!nameInput || !jobInput) {\r\n      console.error('Не удалось найти необходимые поля ввода.');\r\n        console.error('Не удалось найти необходимые поля ввода.');\r\n        return;\r\n    }\r\n// Проверка поля \"Имя\"\r\n  if (!nameInput.validity.valid) {\r\n    if (nameInput.validity.valueMissing) {\r\n      showError(formElement, nameInput, \"Это поле обязательно для заполнения.\", validationConfig);\r\n  } else if (nameInput.validity.valueMissing) {\r\n      showError (formElement, nameInput, \"Имя должно содержать только латинские и кириллицекие буквы, знаки дефиса и пробелы.\", validationConfig);\r\n  } else {\r\n      hideError(formElement, nameInput, validationConfig);\r\n  }\r\n  }\r\n\r\n// Проверка поля \"О себе\"\r\n  if (!jobInput.validity.valid) {\r\n    if (jobInput.validity.valueMissing) {\r\n      showError(formElement, jobInput, \"Это поле обязательно для заполнения.\", validationConfig);\r\n    } else if (jobInput.validity.patternMismatch) {\r\n      showError (formElement, nameInput, \"Имя должно содержать только латинские и кириллицекие буквы, знаки дефиса и пробелы.\", validationConfig);\r\n    }\r\n  } else {\r\n    hideError(formElement, jobInput, validationConfig);\r\n  }\r\n\r\n// Управление активностью кнопки \"Сохранить\"\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n  toggleButtonState(formElement, validationConfig, buttonElement);\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some(inputElement => !inputElement.validity.valid);\r\n};\r\ndocument.addEventListener(\"DOMContentLoaded\");\r\nconst toggleButtonState = (formElement, validationConfig, buttonElement) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const isInvalid = hasInvalidInput(inputList); // Проверяем валидность\r\n\r\n  if (buttonElement) {\r\n    buttonElement.disabled = isInvalid; // Управляем состоянием кнопки\r\n  }\r\n\r\n  if (isInvalid) {\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass); // Добавляем класс, если есть ошибка\r\n  } else {\r\n      buttonElement.classList.remove(validationConfig.inactiveButtonClass); // Убираем класс, если ошибки нет\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      validateForm(formElement,\r\n         validationConfig);\r\n    });\r\n  });\r\n  toggleButtonState(formElement, validationConfig, buttonElement);\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\r\n// Проходим по каждой форме и устанавливаем обработчики событий\r\n  formList.forEach((currentFormElement) => {\r\n    setEventListeners(currentFormElement, validationConfig);\r\n  });\r\n};\r\n\r\n\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  \r\n    inputList.forEach((inputElement) => {\r\n      hideError(formElement, inputElement, validationConfig);\r\n        inputElement.setCustomValidity(\"\"); \r\n  });\r\n\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n    if (buttonElement) {\r\n      buttonElement.disabled = true;\r\n      buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    }\r\n};","import './index.css'; // добавьте импорт главного файла стилей\nimport { initialCards } from './scripts/cards.js'; // импорт картинок\nimport { openModal, closeModal, closeOverlay } from './components/modal.js'; // импорт модалок\nimport { likeCard, createCard } from './components/card.js';\nimport { getUserInfo, getInitialCards, updateUserInfo, addCard, removeCard, updateAvatar } from './components/api.js'\nimport { enableValidation, clearValidation } from './components/validation.js';\n\n// Контейнер с карточками\nconst placesList = document.querySelector('.places__list');\n// Редактирование профиля\nconst formEditProfile = document.forms[\"edit-profile\"];\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\n// Назначение\nconst formNewPlace = document.forms[\"new-place\"];\nconst cardNameInput = formNewPlace.querySelector('.popup__input_type_card-name');\nconst urlInput = formNewPlace.querySelector('.popup__input_type_url');\nconst imagePopup =   document.querySelector('.popup_type_image');\nconst popupImage = imagePopup.querySelector('.popup__image');\nconst popupCaption = imagePopup.querySelector('.popup__caption');\n\nconst addButton =  document.querySelector('.profile__add-button'); // Кнопка доб-ия карточек\nconst addPopup =   document.querySelector('.popup_type_new-card'); // Доб-ие карточки\n\nconst editButton =  document.querySelector('.profile__edit-button'); // Ред-ие профиля\nconst popUps = document.querySelectorAll(\".popup\"); // Попапы\nconst editPopup =   document.querySelector('.popup_type_edit'); // Ред-ие\nconst confirmPopup = document.querySelector(\".popup_type_confirm\");\nconst confirmButton = confirmPopup.querySelector(\".popup_button\");\nconst closeButtons = document.querySelectorAll('.popup__close');\nconst avatarPopup = document.querySelector('.popup_type_edit-avatar');\nconst avatarInput = document.querySelector('#avatar-input');\nconst profileAvatar = document.querySelector('.profile__image'); // Элемент, отображающий аватар\nconst formEditAvatar = avatarPopup.querySelector('.popup__form');\n\nlet userId;\nlet cardIdForDeletion = null;\nlet selectedCardElement = null;\n\nfunction openCardPopup({link, name}) {\n  popupCaption.textContent = name;\n  popupImage.alt = name;\n  popupImage.src = link;\n  openModal(imagePopup);\n}\n\nconst cardCallbacks = {\n  deleteFunction: deleteCard,\n  likeFunction: likeCard,\n  onCardClickFunction: openCardPopup,\n}\n\n// Обработчик для добавления нового места\nfunction handleNewPlaceFormSubmit(evt) {\n  evt.preventDefault();\n  const name = cardNameInput.value;\n  const link = urlInput.value;\n  const submitButton = evt.target.querySelector(\".popup__button\"); // Блокируем кнопку\n\n    setLoadingState(submitButton, true, \"Сохранение...\");\n\n  // Отправляем данные\n  addCard(name, link)\n    .then((cardData) => {\n      const cardElement = createCard(cardData, cardCallbacks, userId); // Передаем userId \n      placesList.prepend(cardElement); // Используем placesList для подстановки карточки\n      formNewPlace.reset(); // Использование formNewPlace для сброса формы\n      closeModal(addPopup); // Закрытие попапа добавления карточек\n    })\n    .catch((err) => {\n      console.error(\"Ошибка при добавлении карточки:\", err);\n    })\n    .finally(() => {\n      setLoadingState(submitButton, false);\n    });\n}\n\n// Обработчик для редактирования профиля\nfunction handleEditFormSubmit(evt) {\n  evt.preventDefault();\n  const name = nameInput.value; // Используем переменную nameInput\n  const about = jobInput.value; // Используем переменную jobInput\n  const submitButton = evt.target.querySelector(\".popup__button\"); // Блокируем кнопку\n  const originalText = submitButton.textContent;\n  setLoadingState(submitButton, true, \"Сохранение...\");\n\n  updateUserInfo(name, about)\n    .then((userData) => {\n      profileTitle.textContent = userData.name;\n      profileDescription.textContent = userData.about;\n      closeModal(editPopup);\n    })\n    .catch((err) => {\n      console.error(\"Ошибка при обновлении профиля:\", err);\n    })\n    .finally(() => {\n      setLoadingState(submitButton, false, originalText);\n    });\n}\n\nfunction setLoadingState(button, isLoading, text = \"Сохранить\") {\n  button.textContent = isLoading ? text : \"Сохранить\";\n  button.disabled = isLoading;\n}\n\n// Слушатели событий\neditButton.addEventListener(\"click\", () => {\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n  clearValidation(formEditProfile, validationConfig)\n  openModal(editPopup);\n})\n\naddButton.addEventListener(\"click\", () => {\n  formNewPlace.reset();\n  clearValidation(formNewPlace, validationConfig)\n  openModal(addPopup);\n})\n\n// Предотвращение отправки формы при нажатии Esc в попапах\npopUps.forEach((popup) => {\n  const closeCross = popup.querySelector(\".popup_close\");\n    if (closeCross) {\n    closeCross.addEventListener(\"click\", () => {\n    closeModal(popup);\n    });\n  }\n  popup.addEventListener(\"click\", closeOverlay);\n  // Добавляем модификатор popup_is-animated модальному окну\n  popup.classList.add(\"popup_is-animated\");\n})\n\n// Подключение формы к обработчикам\nformNewPlace.addEventListener(\"submit\", handleNewPlaceFormSubmit);\nformEditProfile.addEventListener(\"submit\", handleEditFormSubmit);\n\n// Показать все карточки\ninitialCards.forEach((cardData) => {\n  const card = createCard(cardData, cardCallbacks); // Передаём removeCard в качестве колбека\n  placesList.appendChild(card);\n})\n\ncloseButtons.forEach(button => {\n  button.addEventListener('click', function() {\n    const popup = this.closest('.popup');\n    closeModal(popup);\n  });\n});\n\n// Включение валидации\nconst validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n}\n\nenableValidation(validationConfig);\n\n// Функции отрисовки карточек\nfunction renderCards(cardsData) {\n  cardsData.forEach((cardData) => {\n    const card = createCard(cardData, cardCallbacks);\n    placesList.appendChild(card);\n  })\n}\n\nPromise.all([getUserInfo(), getInitialCards()])\n  .then(([userData, cards]) => {\n    userId = userData._id;\n    profileTitle.textContent = userData.name;\n    profileDescription.textContent = userData.about;\n    if (userData.avatar) {\n      profileAvatar.style.backgroundImage = `url('${userData.avatar}')`;\n    } else {\n    profileAvatar.style.backgroundImage = '';\n    }\n    renderCards(cards);\n  })\n  .catch((err) => {\n    console.error(\"Ошибка обновления:\", err);\n  });\n\n// Ф-ия для удаления карточки\nfunction deleteCard (cardElement, cardId) {\n  cardIdForDeletion = cardId;\n  selectedCardElement = cardElement;\n  openModal(confirmPopup);\n}\n\nconst handleConfirm = (evt) => {\n  evt.preventDefault();\n  // Блокируем кнопку подтверждения\n  const confirmButton = confirmPopup.querySelector(\".popup__button\"); // Найдите кнопку внутри попапа\n  setLoadingState(confirmButton, true, \"Удаление...\");\n  // Отправляем запрос на сервер для удаления карточки\n  removeCard(cardIdForDeletion)\n    .then(() => {\n  // Удаляем карточку из DOM\n    selectedCardElement.remove();\n    closeModal(confirmPopup); // Закрываем попап подтверждения\n    })\n    .catch((error) => {\n      console.error(`Ошибка при удалении карточки: ${error}`);\n    })\n    .finally(() => {\n      // Восстанавливаем текст и состояние кнопки\n       setLoadingState(confirmButton, false, \"Да\");\n    });\n};\n\nconfirmPopup.addEventListener(\"submit\", handleConfirm);\n\n// Функция для открытия попапа редактирования аватара\nfunction openAvatarPopup() {\n  openModal(avatarPopup);\n}\n\n// Слушатель для кнопки редактирования аватара\ndocument.querySelector('.profile__edit-avatar-button').addEventListener('click', openAvatarPopup);\n\n// Обработчик формы редактирования аватара\nformEditAvatar.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n\n  const file = avatarInput.files[0];\n  if (file) {\n    const formData = new FormData();\n    formData.append('avatar', file); // Добавляем файл в FormData\n\n// Вызываем функцию обновления аватара\nupdateAvatar(formData)\n  .then((data) => {\n// Обновляем аватар в интерфейсе, если сервер возвращает обновленный объект пользователя\n    profileAvatar.style.backgroundImage = `url('${data.avatar}')`; // Обновляем отображение аватара\n    closeModal(avatarPopup); // Закрываем попап после обновления\n    })\n  .catch((error) => {\n    console.error('Ошибка при обновлении аватара:', error);\n    });\n  } else {\n    console.error('Не выбран файл для загрузки.');\n  }\n});\n"],"names":["popupOpenedClass","openModal","popupElement","classList","add","document","addEventListener","handleEscClose","closeModal","remove","removeEventListener","event","key","openedPopup","querySelector","closeOverlay","target","currentTarget","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","template","content","createCard","cardData","callbacks","usersId","clonedTemplate","cloneNode","titleElement","imageElement","likeButton","deleteButton","likeCounter","owner","_id","style","display","deleteFunction","isLiked","likes","some","like","textContent","name","alt","src","link","length","console","log","likeFunction","onCardClickFunction","error","showError","formElement","inputElement","errorMessage","validationConfig","errorElement","id","inputErrorClass","errorClass","hideError","toggleButtonState","buttonElement","isInvalid","Array","from","querySelectorAll","inputSelector","validity","valid","disabled","inactiveButtonClass","clearValidation","forEach","setCustomValidity","submitButtonSelector","userId","placesList","formEditProfile","forms","nameInput","jobInput","profileTitle","profileDescription","formNewPlace","cardNameInput","urlInput","imagePopup","popupImage","popupCaption","addButton","addPopup","editButton","popUps","editPopup","confirmPopup","closeButtons","avatarPopup","avatarInput","profileAvatar","formEditAvatar","cardIdForDeletion","selectedCardElement","cardCallbacks","cardElement","cardId","endpoint","fetch","method","then","toggleLike","updatedCard","toggle","catch","_ref","setLoadingState","button","isLoading","text","arguments","undefined","value","reset","popup","closeCross","evt","preventDefault","submitButton","body","JSON","stringify","addCard","prepend","err","finally","about","originalText","updateUserInfo","userData","card","appendChild","this","closest","formSelector","currentFormElement","inputList","valueMissing","patternMismatch","validateForm","setEventListeners","enableValidation","all","_ref2","_ref3","cards","avatar","backgroundImage","confirmButton","file","files","formData","FormData","append","updateAvatar","data"],"sourceRoot":""}